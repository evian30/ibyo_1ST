
CREATE TABLE ADD_FILE_MNG
(
	NO		  VARCHAR2(36)  NULL ,
	ADD_FILE_NO	  VARCHAR2(16)  NOT NULL ,
	FILE_PATH	  VARCHAR2(64)  NULL ,
	FILE_REAL_NM	  VARCHAR2(32)  NULL ,
	FILE_SAVE_NM	  VARCHAR2(32)  NULL ,
	FILE_SIZE	  VARCHAR2(12)  NULL ,
	UP_DATE		  DATE  NULL ,
	CR_DATE		  DATE  NULL ,
	CHMAN_NO	  VARCHAR2(16)  NULL 
);



CREATE UNIQUE INDEX XPK첨부파일관리 ON ADD_FILE_MNG
(ADD_FILE_NO  ASC);



ALTER TABLE ADD_FILE_MNG
	ADD CONSTRAINT  XPK첨부파일관리 PRIMARY KEY (ADD_FILE_NO);



CREATE TABLE CHMAN
(
	CHMAN_NO	  VARCHAR2(16)  NOT NULL ,
	CHMAN_NM	  VARCHAR2(32)  NULL ,
	CHMAN_PHONE	  VARCHAR2(15)  NULL ,
	CHMAN_HP	  VARCHAR2(15)  NULL ,
	CHMAN_EMAIL	  VARCHAR2(32)  NULL ,
	AUTH		  CHAR(1)  NULL ,
	ID		  VARCHAR2(12)  NULL ,
	PASSWD		  VARCHAR2(32)  NULL ,
	LAST_LOGIN_DATE	  DATE  NULL ,
	CORP_NO		  VARCHAR2(16)  NULL ,
	SIGN_IMG_NO	  VARCHAR2(16)  NULL ,
	CHMAN_SECT_CODE	  VARCHAR2(8)  NULL ,
	GRADE_CODE	  VARCHAR2(8)  NULL ,
	DEPT_CODE	  VARCHAR2(8)  NULL ,
	CHMAN_TYPE_CODE	  VARCHAR2(8)  NULL ,
	CHMAN_STATUS_CODE  VARCHAR2(8)  NULL ,
	MEMO_CONTENTS	  VARCHAR2(4000)  NULL ,
	SNS_ACCOUNT	  VARCHAR2(32)  NULL ,
	CR_DATE		  DATE  NULL ,
	UP_DATE		  DATE  NULL ,
	USE_YN		  CHAR(1)  NULL 
);



CREATE UNIQUE INDEX XPK담당자 ON CHMAN
(CHMAN_NO  ASC);



ALTER TABLE CHMAN
	ADD CONSTRAINT  XPK담당자 PRIMARY KEY (CHMAN_NO);



CREATE TABLE CODE_TYPE_MNG
(
	CODE_SECT	  CHAR(18)  NOT NULL ,
	CODE_SECT명	  CHAR(18)  NULL ,
	CR_DATE		  CHAR(18)  NULL 
);



CREATE UNIQUE INDEX XPK코드구분관리 ON CODE_TYPE_MNG
(CODE_SECT  ASC);



ALTER TABLE CODE_TYPE_MNG
	ADD CONSTRAINT  XPK코드구분관리 PRIMARY KEY (CODE_SECT);



CREATE TABLE CONT_CHMAN
(
	CONT_NO		  VARCHAR2(16)  NOT NULL ,
	CHMAN_NO	  VARCHAR2(16)  NOT NULL ,
	CR_DATE		  DATE  NULL ,
	CHMAN_SECT_CODE	  VARCHAR2(8)  NULL 
);



CREATE UNIQUE INDEX XPK계약담당자 ON CONT_CHMAN
(CONT_NO  ASC,CHMAN_NO  ASC);



ALTER TABLE CONT_CHMAN
	ADD CONSTRAINT  XPK계약담당자 PRIMARY KEY (CONT_NO,CHMAN_NO);



CREATE TABLE CONT_PROD
(
	PROD_NO		  VARCHAR2(16)  NOT NULL ,
	CONT_NO		  VARCHAR2(16)  NOT NULL ,
	CNT		  NUMBER  NULL ,
	CR_DATE		  DATE  NULL ,
	ETC_CONTENTS	  VARCHAR2(4000)  NULL 
);



CREATE UNIQUE INDEX XPK계약제품 ON CONT_PROD
(PROD_NO  ASC,CONT_NO  ASC);



ALTER TABLE CONT_PROD
	ADD CONSTRAINT  XPK계약제품 PRIMARY KEY (PROD_NO,CONT_NO);



CREATE TABLE CONTRACT
(
	CONT_NO		  VARCHAR2(16)  NOT NULL ,
	SUP_CORP_NO	  VARCHAR2(16)  NOT NULL ,
	NEED_CORP_NO	  VARCHAR2(16)  NOT NULL ,
	CONT_NM		  VARCHAR2(32)  NULL ,
	CONT_DATE	  DATE  NULL ,
	ST_DATE		  VARCHAR2(8)  NULL ,
	END_DATE	  VARCHAR2(8)  NULL ,
	CR_DATE		  DATE  NULL ,
	CONT_TYPE_CODE	  VARCHAR2(16)  NULL ,
	PJT_NO		  VARCHAR2(16)  NOT NULL ,
	UP_DATE		  DATE  NULL ,
	CONTRACT_PRICE	  NUMBER  NULL ,
	CONT_CONTENTS	  VARCHAR2(4000)  NULL ,
	USE_YN		  CHAR(1)  NULL ,
	CHMAN_NO	  VARCHAR2(16)  NULL 
);



CREATE UNIQUE INDEX XPK계약 ON CONTRACT
(CONT_NO  ASC);



ALTER TABLE CONTRACT
	ADD CONSTRAINT  XPK계약 PRIMARY KEY (CONT_NO);



CREATE TABLE CORP
(
	CORP_NO		  VARCHAR2(16)  NOT NULL ,
	CORP_NM		  VARCHAR2(32)  NULL ,
	SSN		  VARCHAR2(15)  NULL ,
	ADDR1		  VARCHAR2(128)  NULL ,
	REP_PHONE	  VARCHAR2(15)  NULL ,
	REP_FAX		  VARCHAR2(15)  NULL ,
	CR_DATE		  DATE  NULL ,
	ADDR2		  VARCHAR2(128)  NULL ,
	ZIPCODE		  VARCHAR2(30)  NULL ,
	IMPTC_GRADE_CODE  VARCHAR2(8)  NULL ,
	CORP_SECT_CODE	  VARCHAR2(8)  NULL ,
	CEO_NM		  VARCHAR2(32)  NULL ,
	CATEGORY_NM	  VARCHAR2(128)  NULL ,
	CONDITION_NM	  VARCHAR2(128)  NULL ,
	SITE_URL	  VARCHAR2(128)  NULL ,
	CORP_STATUS_CODE  VARCHAR2(8)  NULL ,
	UP_DATE		  DATE  NULL ,
	USE_YN		  CHAR(1)  NULL ,
	CHMAN_NO	  VARCHAR2(16)  NULL 
);



CREATE UNIQUE INDEX XPK법인 ON CORP
(CORP_NO  ASC);



ALTER TABLE CORP
	ADD CONSTRAINT  XPK법인 PRIMARY KEY (CORP_NO);



CREATE TABLE OS
(
	OS_NO		  VARCHAR2(16)  NOT NULL ,
	OS_NM		  VARCHAR2(32)  NULL ,
	OS_VER		  VARCHAR2(16)  NULL ,
	OS_MANUFACT	  VARCHAR2(32)  NULL ,
	USE_YN		  CHAR(1)  NULL 
);



CREATE UNIQUE INDEX XPKOS ON OS
(OS_NO  ASC);



ALTER TABLE OS
	ADD CONSTRAINT  XPKOS PRIMARY KEY (OS_NO);



CREATE TABLE OTHER_SW
(
	SW_NO		  VARCHAR2(16)  NOT NULL ,
	SW_TYPE_CODE	  VARCHAR2(8)  NULL ,
	SW_NM		  VARCHAR2(32)  NULL ,
	SW_VER		  VARCHAR2(16)  NULL ,
	USE_YN		  CHAR(1)  NULL 
);



CREATE UNIQUE INDEX XPK기타SW ON OTHER_SW
(SW_NO  ASC);



ALTER TABLE OTHER_SW
	ADD CONSTRAINT  XPK기타SW PRIMARY KEY (SW_NO);



CREATE TABLE OTHER_SW_SETUP
(
	SW_NO		  VARCHAR2(16)  NOT NULL ,
	PROD_NO		  VARCHAR2(16)  NOT NULL ,
	PJT_NO		  VARCHAR2(16)  NOT NULL ,
	SW_SETUP_PATH	  VARCHAR2(64)  NULL ,
	CR_DATE		  DATE  NULL ,
	PROD_SEQ	  VARCHAR2(3)  NOT NULL 
);



CREATE UNIQUE INDEX XPK기타SW설치 ON OTHER_SW_SETUP
(SW_NO  ASC,PROD_NO  ASC,PJT_NO  ASC,PROD_SEQ  ASC);



ALTER TABLE OTHER_SW_SETUP
	ADD CONSTRAINT  XPK기타SW설치 PRIMARY KEY (SW_NO,PROD_NO,PJT_NO,PROD_SEQ);



CREATE TABLE PJT
(
	PJT_NO		  VARCHAR2(16)  NOT NULL ,
	PJT_NM		  VARCHAR2(128)  NULL ,
	PJT_ST_DATE	  DATE  NULL ,
	PJT_END_DATE	  DATE  NULL ,
	PJT_STATUS_CODE	  VARCHAR2(8)  NULL ,
	CR_DATE		  DATE  NULL ,
	WORK_TYPE_CODE	  VARCHAR2(8)  NULL ,
	PJT_CONTENTS	  VARCHAR2(4000)  NULL ,
	UP_DATE		  DATE  NULL ,
	PJT_IMPTC_GRADE_CODE  VARCHAR2(8)  NULL ,
	USE_YN		  CHAR(1)  NULL ,
	CHMAN_NO	  VARCHAR2(16)  NULL 
);



CREATE UNIQUE INDEX XPK프로젝트 ON PJT
(PJT_NO  ASC);



ALTER TABLE PJT
	ADD CONSTRAINT  XPK프로젝트 PRIMARY KEY (PJT_NO);



CREATE TABLE PJT_CHMAN
(
	PJT_NO		  VARCHAR2(16)  NOT NULL ,
	CHMAN_NO	  VARCHAR2(16)  NOT NULL ,
	CR_DATE		  DATE  NULL ,
	CHMAN_SECT_CODE	  VARCHAR2(8)  NULL ,
	SEQ		  VARCHAR2(3)  NULL 
);



CREATE UNIQUE INDEX XPK프로젝트담당자 ON PJT_CHMAN
(PJT_NO  ASC,CHMAN_NO  ASC);



ALTER TABLE PJT_CHMAN
	ADD CONSTRAINT  XPK프로젝트담당자 PRIMARY KEY (PJT_NO,CHMAN_NO);



CREATE TABLE PJT_MEMO
(
	PJT_NO		  VARCHAR2(16)  NOT NULL ,
	CHMAN_NO	  VARCHAR2(16)  NOT NULL ,
	CONTENTS	  VARCHAR2(4000)  NULL ,
	CR_DATE		  DATE  NULL ,
	SEQ		  VARCHAR2(3)  NOT NULL 
);



CREATE UNIQUE INDEX XPK프로젝트메모 ON PJT_MEMO
(PJT_NO  ASC,CHMAN_NO  ASC,SEQ  ASC);



ALTER TABLE PJT_MEMO
	ADD CONSTRAINT  XPK프로젝트메모 PRIMARY KEY (PJT_NO,CHMAN_NO,SEQ);



CREATE TABLE PJT_SUP_PROD
(
	PROD_NO		  VARCHAR2(16)  NOT NULL ,
	PJT_NO		  VARCHAR2(16)  NOT NULL ,
	SETUP_PATH	  VARCHAR2(64)  NULL ,
	SETUP_SV_HOSTNAME  VARCHAR2(32)  NULL ,
	SETUP_SV_IP	  VARCHAR2(32)  NULL ,
	SERVICE_NM	  VARCHAR2(32)  NULL ,
	SETUP_OS_NO	  VARCHAR2(16)  NOT NULL ,
	PROD_USE_ETC	  VARCHAR2(4000)  NULL ,
	CNT		  NUMBER  NULL ,
	SETUP_DATE	  DATE  NULL ,
	PROD_USE_CODE	  VARCHAR2(8)  NULL ,
	SV_OPER_CODE	  VARCHAR2(8)  NULL ,
	PROD_SEQ	  VARCHAR2(3)  NOT NULL ,
	CR_DATE		  DATE  NULL ,
	UP_DATE		  DATE  NULL ,
	USE_YN		  CHAR(1)  NULL ,
	WRITERNO	  VARCHAR2(16)  NULL 
);



CREATE UNIQUE INDEX XPK프로젝트공급제품 ON PJT_SUP_PROD
(PROD_NO  ASC,PJT_NO  ASC,PROD_SEQ  ASC);



ALTER TABLE PJT_SUP_PROD
	ADD CONSTRAINT  XPK프로젝트공급제품 PRIMARY KEY (PROD_NO,PJT_NO,PROD_SEQ);



CREATE TABLE PROD
(
	PROD_NO		  VARCHAR2(16)  NOT NULL ,
	PROD_NM		  VARCHAR2(32)  NULL ,
	PROD_VER	  VARCHAR2(16)  NULL ,
	PROD_MOD_CONTENTS  VARCHAR2(4000)  NULL ,
	PROD_TYPE_CODE	  VARCHAR2(8)  NULL ,
	RECMD_CPU	  VARCHAR2(32)  NULL ,
	RECMD_MEM	  VARCHAR2(32)  NULL ,
	RECMD_DISK	  VARCHAR2(32)  NULL ,
	PROD_BROC	  VARCHAR2(64)  NULL ,
	PROD_INTRO	  VARCHAR2(4000)  NULL ,
	PROD_ABLE	  VARCHAR2(4000)  NULL ,
	RELEASE_DATE	  DATE  NULL ,
	CR_DATE		  DATE  NULL ,
	RECMD_NIC	  VARCHAR2(32)  NULL ,
	UP_DATE		  DATE  NULL ,
	USE_YN		  CHAR(1)  NULL ,
	WRITERNO	  VARCHAR2(16)  NULL 
);



CREATE UNIQUE INDEX XPK제품 ON PROD
(PROD_NO  ASC);



ALTER TABLE PROD
	ADD CONSTRAINT  XPK제품 PRIMARY KEY (PROD_NO);



CREATE TABLE PROD_DEV_CHMAN
(
	PROD_NO		  VARCHAR2(16)  NOT NULL ,
	CHMAN_NO	  VARCHAR2(16)  NOT NULL ,
	CR_DATE		  DATE  NULL ,
	SEQ		  VARCHAR2(3)  NULL 
);



CREATE UNIQUE INDEX XPK제품개발담당자 ON PROD_DEV_CHMAN
(PROD_NO  ASC,CHMAN_NO  ASC);



ALTER TABLE PROD_DEV_CHMAN
	ADD CONSTRAINT  XPK제품개발담당자 PRIMARY KEY (PROD_NO,CHMAN_NO);



CREATE TABLE PROD_LOG_PATH
(
	PROD_NO		  VARCHAR2(16)  NOT NULL ,
	PJT_NO		  VARCHAR2(16)  NOT NULL ,
	PROD_SEQ	  VARCHAR2(3)  NOT NULL ,
	LOG_PATH	  VARCHAR2(64)  NULL ,
	CR_DATE		  DATE  NULL 
);



CREATE UNIQUE INDEX XPK제품로그경로 ON PROD_LOG_PATH
(PROD_NO  ASC,PJT_NO  ASC,PROD_SEQ  ASC);



ALTER TABLE PROD_LOG_PATH
	ADD CONSTRAINT  XPK제품로그경로 PRIMARY KEY (PROD_NO,PJT_NO,PROD_SEQ);



CREATE TABLE PROD_RECMD_SW
(
	PROD_NO		  VARCHAR2(16)  NOT NULL ,
	SW_NO		  VARCHAR2(16)  NOT NULL ,
	CR_DATE		  DATE  NULL 
);



CREATE UNIQUE INDEX XPK제품권장SW ON PROD_RECMD_SW
(PROD_NO  ASC,SW_NO  ASC);



ALTER TABLE PROD_RECMD_SW
	ADD CONSTRAINT  XPK제품권장SW PRIMARY KEY (PROD_NO,SW_NO);



CREATE TABLE RECMD_OS
(
	PROD_NO		  VARCHAR2(16)  NOT NULL ,
	OS_NO		  VARCHAR2(16)  NOT NULL ,
	SEQ		  VARCHAR2(3)  NULL ,
	CR_DATE		  DATE  NULL 
);



CREATE UNIQUE INDEX XPK제품권장OS ON RECMD_OS
(PROD_NO  ASC,OS_NO  ASC);



ALTER TABLE RECMD_OS
	ADD CONSTRAINT  XPK제품권장OS PRIMARY KEY (PROD_NO,OS_NO);



CREATE TABLE SCHE_MNG
(
	SCHE_NO		  VARCHAR2(16)  NOT NULL ,
	CHMAN_NO	  VARCHAR2(16)  NULL ,
	ST_DATE		  DATE  NULL ,
	END_DATE	  DATE  NULL ,
	TITLE		  VARCHAR2(128)  NULL ,
	CONTENTS	  VARCHAR2(4000)  NULL ,
	CR_DATE		  DATE  NULL ,
	UP_DATE		  DATE  NULL 
);



CREATE UNIQUE INDEX XPK스케줄관리 ON SCHE_MNG
(SCHE_NO  ASC);



ALTER TABLE SCHE_MNG
	ADD CONSTRAINT  XPK스케줄관리 PRIMARY KEY (SCHE_NO);



CREATE TABLE SET_FILE_PATH
(
	PROD_NO		  VARCHAR2(16)  NOT NULL ,
	PJT_NO		  VARCHAR2(16)  NOT NULL ,
	SET_FILE_PATH	  VARCHAR2(64)  NULL ,
	CR_DATE		  DATE  NULL ,
	SET_FILE_CODE	  VARCHAR2(8)  NOT NULL ,
	PROD_SEQ	  VARCHAR2(3)  NOT NULL 
);



CREATE UNIQUE INDEX XPK설정파일경로 ON SET_FILE_PATH
(PROD_NO  ASC,PJT_NO  ASC,SET_FILE_CODE  ASC,PROD_SEQ  ASC);



ALTER TABLE SET_FILE_PATH
	ADD CONSTRAINT  XPK설정파일경로 PRIMARY KEY (PROD_NO,PJT_NO,SET_FILE_CODE,PROD_SEQ);



CREATE TABLE SIGN_IMG
(
	SIGN_IMG_NO	  VARCHAR2(16)  NOT NULL ,
	SIGN_IMG_PATH	  VARCHAR2(64)  NULL 
);



CREATE UNIQUE INDEX XPK서명이미지 ON SIGN_IMG
(SIGN_IMG_NO  ASC);



ALTER TABLE SIGN_IMG
	ADD CONSTRAINT  XPK서명이미지 PRIMARY KEY (SIGN_IMG_NO);



CREATE TABLE TECH_SUP
(
	TECH_SUP_NO	  VARCHAR2(16)  NOT NULL ,
	ST_DATE		  DATE  NULL ,
	CR_DATE		  DATE  NULL ,
	UP_DATE		  DATE  NULL ,
	TECH_SUP_TYPE_CODE  VARCHAR2(8)  NULL ,
	TECH_SUP_TRAN_TYPE_CODE  VARCHAR2(8)  NULL ,
	CUSTOMER_DEMAND	  VARCHAR2(4000)  NULL ,
	TECH_SUP_NEC_TIME  VARCHAR2(4)  NULL ,
	END_DATE	  DATE  NULL ,
	CUSTOMER_SUP_CONTENTS  VARCHAR2(4000)  NULL ,
	TRAN_RESULT	  VARCHAR2(4000)  NULL ,
	REVISIT_EXP_DATE  DATE  NULL ,
	PAY_YN		  CHAR(1)  NULL ,
	PAYPRICE	  NUMBER  NULL ,
	LOC		  VARCHAR2(128)  NULL ,
	TECH_SUP_EMAIL	  VARCHAR2(32)  NULL ,
	TECH_SUP_PHONE	  VARCHAR2(15)  NULL ,
	TECH_SUP_IP_ADDR  VARCHAR2(32)  NULL ,
	TECH_SUP_APP_NO	  VARCHAR2(16)  NOT NULL ,
	CHMAN_NO	  VARCHAR2(16)  NULL ,
	TECH_SUP_HP	  VARCHAR2(15)  NULL ,
	TECH_SUP_RESULT_CODE  VARCHAR2(8)  NULL ,
	USE_YN		  CHAR(1)  NULL 
);



CREATE UNIQUE INDEX XPK기술지원 ON TECH_SUP
(TECH_SUP_NO  ASC);



ALTER TABLE TECH_SUP
	ADD CONSTRAINT  XPK기술지원 PRIMARY KEY (TECH_SUP_NO);



CREATE TABLE TECH_SUP_APP
(
	TECH_SUP_APP_NO	  VARCHAR2(16)  NOT NULL ,
	PJT_NO		  VARCHAR2(16)  NULL ,
	CUSTOMER_DEMAND	  VARCHAR2(4000)  NULL ,
	APP_NM		  VARCHAR2(32)  NULL ,
	APP_REC_DATE	  DATE  NULL ,
	ST_ABOUT_DATE	  VARCHAR2(8)  NULL ,
	END_ABOUT_DATE	  VARCHAR2(8)  NULL ,
	APP_TITLE	  VARCHAR2(128)  NULL ,
	APP_CONTENTS	  VARCHAR2(4000)  NULL ,
	CONTENTS	  VARCHAR2(4000)  NULL ,
	CR_DATE		  DATE  NULL ,
	UP_DATE		  DATE  NULL ,
	APP_HP		  VARCHAR2(15)  NULL ,
	APP_EMAIL	  VARCHAR2(32)  NULL ,
	WRITERNO	  VARCHAR2(16)  NULL ,
	USE_YN		  CHAR(1)  NULL 
);



CREATE UNIQUE INDEX XPK기술지원요청 ON TECH_SUP_APP
(TECH_SUP_APP_NO  ASC);



ALTER TABLE TECH_SUP_APP
	ADD CONSTRAINT  XPK기술지원요청 PRIMARY KEY (TECH_SUP_APP_NO);



CREATE TABLE TECH_SUP_CHMAN
(
	CHMAN_NO	  VARCHAR2(16)  NOT NULL ,
	CR_DATE		  DATE  NULL ,
	CHMAN_SECT_CODE	  VARCHAR2(8)  NULL ,
	TECH_SUP_APP_NO	  VARCHAR2(16)  NOT NULL ,
	MATCH_YN	  CHAR(1)  NULL 
);



CREATE UNIQUE INDEX XPK기술지원담당자 ON TECH_SUP_CHMAN
(CHMAN_NO  ASC,TECH_SUP_APP_NO  ASC);



ALTER TABLE TECH_SUP_CHMAN
	ADD CONSTRAINT  XPK기술지원담당자 PRIMARY KEY (CHMAN_NO,TECH_SUP_APP_NO);



CREATE TABLE TECH_SUP_PROD
(
	TECH_SUP_NO	  VARCHAR2(16)  NOT NULL ,
	PROD_NO		  VARCHAR2(16)  NOT NULL ,
	SEQ		  VARCHAR2(3)  NULL ,
	CR_DATE		  DATE  NULL 
);



CREATE UNIQUE INDEX XPK기술지원제품 ON TECH_SUP_PROD
(TECH_SUP_NO  ASC,PROD_NO  ASC);



ALTER TABLE TECH_SUP_PROD
	ADD CONSTRAINT  XPK기술지원제품 PRIMARY KEY (TECH_SUP_NO,PROD_NO);



CREATE TABLE TECH_SUP_SEQ_STATUS
(
	TECH_SUP_APP_NO	  VARCHAR2(16)  NOT NULL ,
	TECH_SUP_STATUS_CODE  VARCHAR2(8)  NOT NULL ,
	SEQ		  VARCHAR2(3)  NOT NULL ,
	CR_DATE		  DATE  NULL ,
	CONTENTS	  VARCHAR2(4000)  NULL ,
	REJECT_YN	  CHAR(1)  NULL ,
	REJECT_CONTENTS	  VARCHAR2(4000)  NULL 
);



CREATE UNIQUE INDEX XPK기술지원요청상태 ON TECH_SUP_SEQ_STATUS
(TECH_SUP_APP_NO  ASC,TECH_SUP_STATUS_CODE  ASC,SEQ  ASC);



ALTER TABLE TECH_SUP_SEQ_STATUS
	ADD CONSTRAINT  XPK기술지원요청상태 PRIMARY KEY (TECH_SUP_APP_NO,TECH_SUP_STATUS_CODE,SEQ);



CREATE TABLE TECH_SUP_SUBMIT
(
	TECH_SUP_NO	  VARCHAR2(16)  NOT NULL ,
	CHMAN_NO	  VARCHAR2(16)  NOT NULL ,
	SEQ		  VARCHAR2(3)  NULL ,
	SUBMIT_YN	  CHAR(1)  NULL ,
	SUBMIT_DATE	  DATE  NULL 
);



CREATE UNIQUE INDEX XPK기술지원결재 ON TECH_SUP_SUBMIT
(TECH_SUP_NO  ASC,CHMAN_NO  ASC);



ALTER TABLE TECH_SUP_SUBMIT
	ADD CONSTRAINT  XPK기술지원결재 PRIMARY KEY (TECH_SUP_NO,CHMAN_NO);



CREATE TABLE TOT_CODE_MNG
(
	CODE		  VARCHAR2(8)  NOT NULL ,
	CODE_NM		  VARCHAR2(32)  NULL ,
	CODE_SECT	  VARCHAR2(40)  NOT NULL ,
	CR_DATE		  DATE  NULL ,
	USE_YN		  CHAR(1)  NULL 
);



CREATE UNIQUE INDEX XPK통합코드관리 ON TOT_CODE_MNG
(CODE  ASC,CODE_SECT  ASC);



ALTER TABLE TOT_CODE_MNG
	ADD CONSTRAINT  XPK통합코드관리 PRIMARY KEY (CODE,CODE_SECT);



CREATE TABLE ZIPCODE
(
	ZIPCODE		  CHAR(18)  NULL ,
	SERIAL		  CHAR(18)  NULL ,
	ADDR_GUBUN1	  CHAR(18)  NULL ,
	ADDR_GUBUN2	  CHAR(18)  NULL ,
	ADDR_GUBUN3	  CHAR(18)  NULL ,
	ADDR_GUBUN4	  CHAR(18)  NULL ,
	ADDR_GUBUN5	  CHAR(18)  NULL ,
	BUNZI		  CHAR(18)  NULL ,
	ST_NM		  CHAR(18)  NULL ,
	MOD_DATE	  CHAR(18)  NULL ,
	ADDR		  CHAR(18)  NULL 
);



ALTER TABLE CHMAN
	ADD (CONSTRAINT  R_49 FOREIGN KEY (CORP_NO) REFERENCES CORP(CORP_NO) ON DELETE SET NULL);



ALTER TABLE CHMAN
	ADD (CONSTRAINT  R_51 FOREIGN KEY (SIGN_IMG_NO) REFERENCES SIGN_IMG(SIGN_IMG_NO) ON DELETE SET NULL);



ALTER TABLE CONT_CHMAN
	ADD (CONSTRAINT  R_65 FOREIGN KEY (CHMAN_NO) REFERENCES CHMAN(CHMAN_NO));



ALTER TABLE CONT_CHMAN
	ADD (CONSTRAINT  R_66 FOREIGN KEY (CONT_NO) REFERENCES CONTRACT(CONT_NO));



ALTER TABLE CONT_PROD
	ADD (CONSTRAINT  R_34 FOREIGN KEY (PROD_NO) REFERENCES PROD(PROD_NO));



ALTER TABLE CONT_PROD
	ADD (CONSTRAINT  R_35 FOREIGN KEY (CONT_NO) REFERENCES CONTRACT(CONT_NO));



ALTER TABLE CONTRACT
	ADD (CONSTRAINT  R_39 FOREIGN KEY (SUP_CORP_NO) REFERENCES CORP(CORP_NO));



ALTER TABLE CONTRACT
	ADD (CONSTRAINT  R_78 FOREIGN KEY (NEED_CORP_NO) REFERENCES CORP(CORP_NO));



ALTER TABLE CONTRACT
	ADD (CONSTRAINT  R_70 FOREIGN KEY (PJT_NO) REFERENCES PJT(PJT_NO));



ALTER TABLE OTHER_SW_SETUP
	ADD (CONSTRAINT  R_44 FOREIGN KEY (PROD_NO,PJT_NO,PROD_SEQ) REFERENCES PJT_SUP_PROD(PROD_NO,PJT_NO,PROD_SEQ));



ALTER TABLE OTHER_SW_SETUP
	ADD (CONSTRAINT  R_45 FOREIGN KEY (SW_NO) REFERENCES OTHER_SW(SW_NO));



ALTER TABLE PJT_CHMAN
	ADD (CONSTRAINT  R_40 FOREIGN KEY (PJT_NO) REFERENCES PJT(PJT_NO));



ALTER TABLE PJT_CHMAN
	ADD (CONSTRAINT  R_58 FOREIGN KEY (CHMAN_NO) REFERENCES CHMAN(CHMAN_NO));



ALTER TABLE PJT_MEMO
	ADD (CONSTRAINT  R_69 FOREIGN KEY (PJT_NO) REFERENCES PJT(PJT_NO));



ALTER TABLE PJT_MEMO
	ADD (CONSTRAINT  R_70 FOREIGN KEY (CHMAN_NO) REFERENCES CHMAN(CHMAN_NO));



ALTER TABLE PJT_SUP_PROD
	ADD (CONSTRAINT  R_26 FOREIGN KEY (PROD_NO) REFERENCES PROD(PROD_NO));



ALTER TABLE PJT_SUP_PROD
	ADD (CONSTRAINT  R_27 FOREIGN KEY (PJT_NO) REFERENCES PJT(PJT_NO));



ALTER TABLE PJT_SUP_PROD
	ADD (CONSTRAINT  R_33 FOREIGN KEY (SETUP_OS_NO) REFERENCES OS(OS_NO));



ALTER TABLE PROD_DEV_CHMAN
	ADD (CONSTRAINT  R_66 FOREIGN KEY (PROD_NO) REFERENCES PROD(PROD_NO));



ALTER TABLE PROD_DEV_CHMAN
	ADD (CONSTRAINT  R_67 FOREIGN KEY (CHMAN_NO) REFERENCES CHMAN(CHMAN_NO));



ALTER TABLE PROD_LOG_PATH
	ADD (CONSTRAINT  R_47 FOREIGN KEY (PROD_NO,PJT_NO,PROD_SEQ) REFERENCES PJT_SUP_PROD(PROD_NO,PJT_NO,PROD_SEQ));



ALTER TABLE PROD_RECMD_SW
	ADD (CONSTRAINT  R_64 FOREIGN KEY (PROD_NO) REFERENCES PROD(PROD_NO));



ALTER TABLE PROD_RECMD_SW
	ADD (CONSTRAINT  R_65 FOREIGN KEY (SW_NO) REFERENCES OTHER_SW(SW_NO));



ALTER TABLE RECMD_OS
	ADD (CONSTRAINT  R_76 FOREIGN KEY (OS_NO) REFERENCES OS(OS_NO));



ALTER TABLE RECMD_OS
	ADD (CONSTRAINT  R_77 FOREIGN KEY (PROD_NO) REFERENCES PROD(PROD_NO));



ALTER TABLE SET_FILE_PATH
	ADD (CONSTRAINT  R_68 FOREIGN KEY (PROD_NO,PJT_NO,PROD_SEQ) REFERENCES PJT_SUP_PROD(PROD_NO,PJT_NO,PROD_SEQ));



ALTER TABLE TECH_SUP
	ADD (CONSTRAINT  R_81 FOREIGN KEY (TECH_SUP_APP_NO) REFERENCES TECH_SUP_APP(TECH_SUP_APP_NO));



ALTER TABLE TECH_SUP_APP
	ADD (CONSTRAINT  R_80 FOREIGN KEY (PJT_NO) REFERENCES PJT(PJT_NO) ON DELETE SET NULL);



ALTER TABLE TECH_SUP_CHMAN
	ADD (CONSTRAINT  R_54 FOREIGN KEY (CHMAN_NO) REFERENCES CHMAN(CHMAN_NO));



ALTER TABLE TECH_SUP_CHMAN
	ADD (CONSTRAINT  R_78 FOREIGN KEY (TECH_SUP_APP_NO) REFERENCES TECH_SUP_APP(TECH_SUP_APP_NO));



ALTER TABLE TECH_SUP_PROD
	ADD (CONSTRAINT  R_12 FOREIGN KEY (PROD_NO) REFERENCES PROD(PROD_NO));



ALTER TABLE TECH_SUP_PROD
	ADD (CONSTRAINT  R_13 FOREIGN KEY (TECH_SUP_NO) REFERENCES TECH_SUP(TECH_SUP_NO));



ALTER TABLE TECH_SUP_SEQ_STATUS
	ADD (CONSTRAINT  R_82 FOREIGN KEY (TECH_SUP_APP_NO) REFERENCES TECH_SUP_APP(TECH_SUP_APP_NO));



ALTER TABLE TECH_SUP_SUBMIT
	ADD (CONSTRAINT  R_71 FOREIGN KEY (TECH_SUP_NO) REFERENCES TECH_SUP(TECH_SUP_NO));



ALTER TABLE TECH_SUP_SUBMIT
	ADD (CONSTRAINT  R_72 FOREIGN KEY (CHMAN_NO) REFERENCES CHMAN(CHMAN_NO));



CREATE  TRIGGER tI_CHMAN BEFORE INSERT ON CHMAN for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37
-- INSERT trigger on CHMAN 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* CORP R/49 CHMAN on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0001e862", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CHMAN"
    P2C_VERB_PHRASE="R/49", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="CORP_NO" */
    UPDATE CHMAN
      SET
        /* %SetFK(CHMAN,NULL) */
        CHMAN.CORP_NO = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM CORP
            WHERE
              /* %JoinFKPK(:%New,CORP," = "," AND") */
              :new.CORP_NO = CORP.CORP_NO
        ) 
        /* %JoinPKPK(CHMAN,:%New," = "," AND") */
         and CHMAN.CHMAN_NO = CHMAN.CHMAN_NO;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* SIGN_IMG R/51 CHMAN on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SIGN_IMG"
    CHILD_OWNER="", CHILD_TABLE="CHMAN"
    P2C_VERB_PHRASE="R/51", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_51", FK_COLUMNS="SIGN_IMG_NO" */
    UPDATE CHMAN
      SET
        /* %SetFK(CHMAN,NULL) */
        CHMAN.SIGN_IMG_NO = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM SIGN_IMG
            WHERE
              /* %JoinFKPK(:%New,SIGN_IMG," = "," AND") */
              :new.SIGN_IMG_NO = SIGN_IMG.SIGN_IMG_NO
        ) 
        /* %JoinPKPK(CHMAN,:%New," = "," AND") */
         and CHMAN.CHMAN_NO = CHMAN.CHMAN_NO;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37
END;
/

CREATE  TRIGGER tD_CHMAN AFTER DELETE ON CHMAN for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37
-- DELETE trigger on CHMAN 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* CHMAN R/54 TECH_SUP_CHMAN on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00060ab8", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_CHMAN"
    P2C_VERB_PHRASE="R/54", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_CHMAN
      WHERE
        /*  %JoinFKPK(TECH_SUP_CHMAN,:%Old," = "," AND") */
        TECH_SUP_CHMAN.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CHMAN because TECH_SUP_CHMAN exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* CHMAN R/58 PJT_CHMAN on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PJT_CHMAN"
    P2C_VERB_PHRASE="R/58", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PJT_CHMAN
      WHERE
        /*  %JoinFKPK(PJT_CHMAN,:%Old," = "," AND") */
        PJT_CHMAN.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CHMAN because PJT_CHMAN exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* CHMAN R/65 CONT_CHMAN on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="CONT_CHMAN"
    P2C_VERB_PHRASE="R/65", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CONT_CHMAN
      WHERE
        /*  %JoinFKPK(CONT_CHMAN,:%Old," = "," AND") */
        CONT_CHMAN.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CHMAN because CONT_CHMAN exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* CHMAN R/70 PJT_MEMO on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PJT_MEMO"
    P2C_VERB_PHRASE="R/70", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PJT_MEMO
      WHERE
        /*  %JoinFKPK(PJT_MEMO,:%Old," = "," AND") */
        PJT_MEMO.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CHMAN because PJT_MEMO exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* CHMAN R/72 TECH_SUP_SUBMIT on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SUBMIT"
    P2C_VERB_PHRASE="R/72", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_72", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_SUBMIT
      WHERE
        /*  %JoinFKPK(TECH_SUP_SUBMIT,:%Old," = "," AND") */
        TECH_SUP_SUBMIT.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CHMAN because TECH_SUP_SUBMIT exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* CHMAN R/67 PROD_DEV_CHMAN on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PROD_DEV_CHMAN"
    P2C_VERB_PHRASE="R/67", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_67", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PROD_DEV_CHMAN
      WHERE
        /*  %JoinFKPK(PROD_DEV_CHMAN,:%Old," = "," AND") */
        PROD_DEV_CHMAN.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CHMAN because PROD_DEV_CHMAN exists.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37
END;
/

CREATE  TRIGGER tU_CHMAN AFTER UPDATE ON CHMAN for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37
-- UPDATE trigger on CHMAN 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
  /* CHMAN R/54 TECH_SUP_CHMAN on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0008e79b", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_CHMAN"
    P2C_VERB_PHRASE="R/54", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="CHMAN_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    CHMAN.CHMAN_NO <> CHMAN.CHMAN_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_CHMAN
      WHERE
        /*  %JoinFKPK(TECH_SUP_CHMAN,:%Old," = "," AND") */
        TECH_SUP_CHMAN.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update CHMAN because TECH_SUP_CHMAN exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
  /* CHMAN R/58 PJT_CHMAN on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PJT_CHMAN"
    P2C_VERB_PHRASE="R/58", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="CHMAN_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    CHMAN.CHMAN_NO <> CHMAN.CHMAN_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PJT_CHMAN
      WHERE
        /*  %JoinFKPK(PJT_CHMAN,:%Old," = "," AND") */
        PJT_CHMAN.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update CHMAN because PJT_CHMAN exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
  /* CHMAN R/65 CONT_CHMAN on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="CONT_CHMAN"
    P2C_VERB_PHRASE="R/65", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="CHMAN_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    CHMAN.CHMAN_NO <> CHMAN.CHMAN_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM CONT_CHMAN
      WHERE
        /*  %JoinFKPK(CONT_CHMAN,:%Old," = "," AND") */
        CONT_CHMAN.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update CHMAN because CONT_CHMAN exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
  /* CHMAN R/70 PJT_MEMO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PJT_MEMO"
    P2C_VERB_PHRASE="R/70", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="CHMAN_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    CHMAN.CHMAN_NO <> CHMAN.CHMAN_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PJT_MEMO
      WHERE
        /*  %JoinFKPK(PJT_MEMO,:%Old," = "," AND") */
        PJT_MEMO.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update CHMAN because PJT_MEMO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
  /* CHMAN R/72 TECH_SUP_SUBMIT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SUBMIT"
    P2C_VERB_PHRASE="R/72", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_72", FK_COLUMNS="CHMAN_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    CHMAN.CHMAN_NO <> CHMAN.CHMAN_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_SUBMIT
      WHERE
        /*  %JoinFKPK(TECH_SUP_SUBMIT,:%Old," = "," AND") */
        TECH_SUP_SUBMIT.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update CHMAN because TECH_SUP_SUBMIT exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
  /* CHMAN R/67 PROD_DEV_CHMAN on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PROD_DEV_CHMAN"
    P2C_VERB_PHRASE="R/67", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_67", FK_COLUMNS="CHMAN_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    CHMAN.CHMAN_NO <> CHMAN.CHMAN_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PROD_DEV_CHMAN
      WHERE
        /*  %JoinFKPK(PROD_DEV_CHMAN,:%Old," = "," AND") */
        PROD_DEV_CHMAN.CHMAN_NO = :old.CHMAN_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update CHMAN because PROD_DEV_CHMAN exists.'
      );
    END IF;
  END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* CORP R/49 CHMAN on child update set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CHMAN"
    P2C_VERB_PHRASE="R/49", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="CORP_NO" */
    UPDATE CHMAN
      SET
        /* %SetFK(CHMAN,NULL) */
        CHMAN.CORP_NO = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM CORP
            WHERE
              /* %JoinFKPK(:%New,CORP," = "," AND") */
              :new.CORP_NO = CORP.CORP_NO
        ) 
        /* %JoinPKPK(CHMAN,:%New," = "," AND") */
         and CHMAN.CHMAN_NO = CHMAN.CHMAN_NO;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* SIGN_IMG R/51 CHMAN on child update set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="SIGN_IMG"
    CHILD_OWNER="", CHILD_TABLE="CHMAN"
    P2C_VERB_PHRASE="R/51", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_51", FK_COLUMNS="SIGN_IMG_NO" */
    UPDATE CHMAN
      SET
        /* %SetFK(CHMAN,NULL) */
        CHMAN.SIGN_IMG_NO = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM SIGN_IMG
            WHERE
              /* %JoinFKPK(:%New,SIGN_IMG," = "," AND") */
              :new.SIGN_IMG_NO = SIGN_IMG.SIGN_IMG_NO
        ) 
        /* %JoinPKPK(CHMAN,:%New," = "," AND") */
         and CHMAN.CHMAN_NO = CHMAN.CHMAN_NO;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37
END;
/


CREATE  TRIGGER tI_CONT_CHMAN BEFORE INSERT ON CONT_CHMAN for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37
-- INSERT trigger on CONT_CHMAN 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* CHMAN R/65 CONT_CHMAN on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000207a7", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="CONT_CHMAN"
    P2C_VERB_PHRASE="R/65", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CHMAN
      WHERE
        /* %JoinFKPK(:%New,CHMAN," = "," AND") */
        :new.CHMAN_NO = CHMAN.CHMAN_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert CONT_CHMAN because CHMAN does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
    /* CONTRACT R/66 CONT_CHMAN on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CONTRACT"
    CHILD_OWNER="", CHILD_TABLE="CONT_CHMAN"
    P2C_VERB_PHRASE="R/66", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="CONT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CONTRACT
      WHERE
        /* %JoinFKPK(:%New,CONTRACT," = "," AND") */
        :new.CONT_NO = CONTRACT.CONT_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert CONT_CHMAN because CONTRACT does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37
END;
/

CREATE  TRIGGER tU_CONT_CHMAN AFTER UPDATE ON CONT_CHMAN for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37
-- UPDATE trigger on CONT_CHMAN 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
  /* CHMAN R/65 CONT_CHMAN on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00021174", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="CONT_CHMAN"
    P2C_VERB_PHRASE="R/65", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="CHMAN_NO" */
  SELECT count(*) INTO NUMROWS
    FROM CHMAN
    WHERE
      /* %JoinFKPK(:%New,CHMAN," = "," AND") */
      :new.CHMAN_NO = CHMAN.CHMAN_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update CONT_CHMAN because CHMAN does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37 */
  /* CONTRACT R/66 CONT_CHMAN on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CONTRACT"
    CHILD_OWNER="", CHILD_TABLE="CONT_CHMAN"
    P2C_VERB_PHRASE="R/66", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="CONT_NO" */
  SELECT count(*) INTO NUMROWS
    FROM CONTRACT
    WHERE
      /* %JoinFKPK(:%New,CONTRACT," = "," AND") */
      :new.CONT_NO = CONTRACT.CONT_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update CONT_CHMAN because CONTRACT does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:37
END;
/


CREATE  TRIGGER tI_CONT_PROD BEFORE INSERT ON CONT_PROD for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on CONT_PROD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/34 CONT_PROD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001fb22", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="CONT_PROD"
    P2C_VERB_PHRASE="R/34", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PROD
      WHERE
        /* %JoinFKPK(:%New,PROD," = "," AND") */
        :new.PROD_NO = PROD.PROD_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert CONT_PROD because PROD does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CONTRACT R/35 CONT_PROD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CONTRACT"
    CHILD_OWNER="", CHILD_TABLE="CONT_PROD"
    P2C_VERB_PHRASE="R/35", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="CONT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CONTRACT
      WHERE
        /* %JoinFKPK(:%New,CONTRACT," = "," AND") */
        :new.CONT_NO = CONTRACT.CONT_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert CONT_PROD because CONTRACT does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_CONT_PROD AFTER UPDATE ON CONT_PROD for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on CONT_PROD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/34 CONT_PROD on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001f271", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="CONT_PROD"
    P2C_VERB_PHRASE="R/34", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="PROD_NO" */
  SELECT count(*) INTO NUMROWS
    FROM PROD
    WHERE
      /* %JoinFKPK(:%New,PROD," = "," AND") */
      :new.PROD_NO = PROD.PROD_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update CONT_PROD because PROD does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CONTRACT R/35 CONT_PROD on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CONTRACT"
    CHILD_OWNER="", CHILD_TABLE="CONT_PROD"
    P2C_VERB_PHRASE="R/35", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="CONT_NO" */
  SELECT count(*) INTO NUMROWS
    FROM CONTRACT
    WHERE
      /* %JoinFKPK(:%New,CONTRACT," = "," AND") */
      :new.CONT_NO = CONTRACT.CONT_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update CONT_PROD because CONTRACT does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_CONTRACT BEFORE INSERT ON CONTRACT for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on CONTRACT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CORP R/39 CONTRACT on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0002e951", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/39", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="SUP_CORP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CORP
      WHERE
        /* %JoinFKPK(:%New,CORP," = "," AND") */
        :new.SUP_CORP_NO = CORP.CORP_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert CONTRACT because CORP does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CORP R/78 CONTRACT on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/78", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_78", FK_COLUMNS="NEED_CORP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CORP
      WHERE
        /* %JoinFKPK(:%New,CORP," = "," AND") */
        :new.NEED_CORP_NO = CORP.CORP_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert CONTRACT because CORP does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT R/70 CONTRACT on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/70", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="PJT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PJT
      WHERE
        /* %JoinFKPK(:%New,PJT," = "," AND") */
        :new.PJT_NO = PJT.PJT_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert CONTRACT because PJT does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tD_CONTRACT AFTER DELETE ON CONTRACT for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- DELETE trigger on CONTRACT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CONTRACT R/35 CONT_PROD on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001e360", PARENT_OWNER="", PARENT_TABLE="CONTRACT"
    CHILD_OWNER="", CHILD_TABLE="CONT_PROD"
    P2C_VERB_PHRASE="R/35", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="CONT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CONT_PROD
      WHERE
        /*  %JoinFKPK(CONT_PROD,:%Old," = "," AND") */
        CONT_PROD.CONT_NO = :old.CONT_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CONTRACT because CONT_PROD exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CONTRACT R/66 CONT_CHMAN on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CONTRACT"
    CHILD_OWNER="", CHILD_TABLE="CONT_CHMAN"
    P2C_VERB_PHRASE="R/66", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="CONT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CONT_CHMAN
      WHERE
        /*  %JoinFKPK(CONT_CHMAN,:%Old," = "," AND") */
        CONT_CHMAN.CONT_NO = :old.CONT_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CONTRACT because CONT_CHMAN exists.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_CONTRACT AFTER UPDATE ON CONTRACT for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on CONTRACT 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CONTRACT R/35 CONT_PROD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0005406e", PARENT_OWNER="", PARENT_TABLE="CONTRACT"
    CHILD_OWNER="", CHILD_TABLE="CONT_PROD"
    P2C_VERB_PHRASE="R/35", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_35", FK_COLUMNS="CONT_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    CONTRACT.CONT_NO <> CONTRACT.CONT_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM CONT_PROD
      WHERE
        /*  %JoinFKPK(CONT_PROD,:%Old," = "," AND") */
        CONT_PROD.CONT_NO = :old.CONT_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update CONTRACT because CONT_PROD exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CONTRACT R/66 CONT_CHMAN on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CONTRACT"
    CHILD_OWNER="", CHILD_TABLE="CONT_CHMAN"
    P2C_VERB_PHRASE="R/66", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="CONT_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    CONTRACT.CONT_NO <> CONTRACT.CONT_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM CONT_CHMAN
      WHERE
        /*  %JoinFKPK(CONT_CHMAN,:%Old," = "," AND") */
        CONT_CHMAN.CONT_NO = :old.CONT_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update CONTRACT because CONT_CHMAN exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CORP R/39 CONTRACT on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/39", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="SUP_CORP_NO" */
  SELECT count(*) INTO NUMROWS
    FROM CORP
    WHERE
      /* %JoinFKPK(:%New,CORP," = "," AND") */
      :new.SUP_CORP_NO = CORP.CORP_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update CONTRACT because CORP does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CORP R/78 CONTRACT on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/78", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_78", FK_COLUMNS="NEED_CORP_NO" */
  SELECT count(*) INTO NUMROWS
    FROM CORP
    WHERE
      /* %JoinFKPK(:%New,CORP," = "," AND") */
      :new.NEED_CORP_NO = CORP.CORP_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update CONTRACT because CORP does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT R/70 CONTRACT on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/70", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="PJT_NO" */
  SELECT count(*) INTO NUMROWS
    FROM PJT
    WHERE
      /* %JoinFKPK(:%New,PJT," = "," AND") */
      :new.PJT_NO = PJT.PJT_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update CONTRACT because PJT does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tD_CORP AFTER DELETE ON CORP for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- DELETE trigger on CORP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CORP R/39 CONTRACT on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00029715", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/39", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="SUP_CORP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CONTRACT
      WHERE
        /*  %JoinFKPK(CONTRACT,:%Old," = "," AND") */
        CONTRACT.SUP_CORP_NO = :old.CORP_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CORP because CONTRACT exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CORP R/78 CONTRACT on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/78", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_78", FK_COLUMNS="NEED_CORP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CONTRACT
      WHERE
        /*  %JoinFKPK(CONTRACT,:%Old," = "," AND") */
        CONTRACT.NEED_CORP_NO = :old.CORP_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete CORP because CONTRACT exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CORP R/49 CHMAN on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CHMAN"
    P2C_VERB_PHRASE="R/49", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="CORP_NO" */
    UPDATE CHMAN
      SET
        /* %SetFK(CHMAN,NULL) */
        CHMAN.CORP_NO = NULL
      WHERE
        /* %JoinFKPK(CHMAN,:%Old," = "," AND") */
        CHMAN.CORP_NO = :old.CORP_NO;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_CORP AFTER UPDATE ON CORP for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on CORP 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CORP R/39 CONTRACT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00030108", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/39", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_39", FK_COLUMNS="SUP_CORP_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    CORP.CORP_NO <> CORP.CORP_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM CONTRACT
      WHERE
        /*  %JoinFKPK(CONTRACT,:%Old," = "," AND") */
        CONTRACT.SUP_CORP_NO = :old.CORP_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update CORP because CONTRACT exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CORP R/78 CONTRACT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/78", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_78", FK_COLUMNS="NEED_CORP_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    CORP.CORP_NO <> CORP.CORP_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM CONTRACT
      WHERE
        /*  %JoinFKPK(CONTRACT,:%Old," = "," AND") */
        CONTRACT.NEED_CORP_NO = :old.CORP_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update CORP because CONTRACT exists.'
      );
    END IF;
  END IF;

  /* CORP R/49 CHMAN on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CORP"
    CHILD_OWNER="", CHILD_TABLE="CHMAN"
    P2C_VERB_PHRASE="R/49", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_49", FK_COLUMNS="CORP_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    CORP.CORP_NO <> CORP.CORP_NO
  THEN
    UPDATE CHMAN
      SET
        /* %SetFK(CHMAN,NULL) */
        CHMAN.CORP_NO = NULL
      WHERE
        /* %JoinFKPK(CHMAN,:%Old," = ",",") */
        CHMAN.CORP_NO = :old.CORP_NO;
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tD_OS AFTER DELETE ON OS for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- DELETE trigger on OS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* OS R/33 PJT_SUP_PROD on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001d454", PARENT_OWNER="", PARENT_TABLE="OS"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/33", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="SETUP_OS_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PJT_SUP_PROD
      WHERE
        /*  %JoinFKPK(PJT_SUP_PROD,:%Old," = "," AND") */
        PJT_SUP_PROD.SETUP_OS_NO = :old.OS_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete OS because PJT_SUP_PROD exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* OS R/76 RECMD_OS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="OS"
    CHILD_OWNER="", CHILD_TABLE="RECMD_OS"
    P2C_VERB_PHRASE="R/76", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_76", FK_COLUMNS="OS_NO" */
    SELECT count(*) INTO NUMROWS
      FROM RECMD_OS
      WHERE
        /*  %JoinFKPK(RECMD_OS,:%Old," = "," AND") */
        RECMD_OS.OS_NO = :old.OS_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete OS because RECMD_OS exists.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_OS AFTER UPDATE ON OS for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on OS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* OS R/33 PJT_SUP_PROD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002103d", PARENT_OWNER="", PARENT_TABLE="OS"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/33", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="SETUP_OS_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    OS.OS_NO <> OS.OS_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PJT_SUP_PROD
      WHERE
        /*  %JoinFKPK(PJT_SUP_PROD,:%Old," = "," AND") */
        PJT_SUP_PROD.SETUP_OS_NO = :old.OS_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update OS because PJT_SUP_PROD exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* OS R/76 RECMD_OS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="OS"
    CHILD_OWNER="", CHILD_TABLE="RECMD_OS"
    P2C_VERB_PHRASE="R/76", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_76", FK_COLUMNS="OS_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    OS.OS_NO <> OS.OS_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM RECMD_OS
      WHERE
        /*  %JoinFKPK(RECMD_OS,:%Old," = "," AND") */
        RECMD_OS.OS_NO = :old.OS_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update OS because RECMD_OS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tD_OTHER_SW AFTER DELETE ON OTHER_SW for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- DELETE trigger on OTHER_SW 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* OTHER_SW R/45 OTHER_SW_SETUP on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0001eb1c", PARENT_OWNER="", PARENT_TABLE="OTHER_SW"
    CHILD_OWNER="", CHILD_TABLE="OTHER_SW_SETUP"
    P2C_VERB_PHRASE="R/45", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="SW_NO" */
    SELECT count(*) INTO NUMROWS
      FROM OTHER_SW_SETUP
      WHERE
        /*  %JoinFKPK(OTHER_SW_SETUP,:%Old," = "," AND") */
        OTHER_SW_SETUP.SW_NO = :old.SW_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete OTHER_SW because OTHER_SW_SETUP exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* OTHER_SW R/65 PROD_RECMD_SW on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="OTHER_SW"
    CHILD_OWNER="", CHILD_TABLE="PROD_RECMD_SW"
    P2C_VERB_PHRASE="R/65", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="SW_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PROD_RECMD_SW
      WHERE
        /*  %JoinFKPK(PROD_RECMD_SW,:%Old," = "," AND") */
        PROD_RECMD_SW.SW_NO = :old.SW_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete OTHER_SW because PROD_RECMD_SW exists.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_OTHER_SW AFTER UPDATE ON OTHER_SW for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on OTHER_SW 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* OTHER_SW R/45 OTHER_SW_SETUP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002325b", PARENT_OWNER="", PARENT_TABLE="OTHER_SW"
    CHILD_OWNER="", CHILD_TABLE="OTHER_SW_SETUP"
    P2C_VERB_PHRASE="R/45", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="SW_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    OTHER_SW.SW_NO <> OTHER_SW.SW_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM OTHER_SW_SETUP
      WHERE
        /*  %JoinFKPK(OTHER_SW_SETUP,:%Old," = "," AND") */
        OTHER_SW_SETUP.SW_NO = :old.SW_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update OTHER_SW because OTHER_SW_SETUP exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* OTHER_SW R/65 PROD_RECMD_SW on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="OTHER_SW"
    CHILD_OWNER="", CHILD_TABLE="PROD_RECMD_SW"
    P2C_VERB_PHRASE="R/65", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="SW_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    OTHER_SW.SW_NO <> OTHER_SW.SW_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PROD_RECMD_SW
      WHERE
        /*  %JoinFKPK(PROD_RECMD_SW,:%Old," = "," AND") */
        PROD_RECMD_SW.SW_NO = :old.SW_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update OTHER_SW because PROD_RECMD_SW exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_OTHER_SW_SETUP BEFORE INSERT ON OTHER_SW_SETUP for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on OTHER_SW_SETUP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT_SUP_PROD R/44 OTHER_SW_SETUP on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00024ce0", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="OTHER_SW_SETUP"
    P2C_VERB_PHRASE="R/44", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
    SELECT count(*) INTO NUMROWS
      FROM PJT_SUP_PROD
      WHERE
        /* %JoinFKPK(:%New,PJT_SUP_PROD," = "," AND") */
        :new.PROD_NO = PJT_SUP_PROD.PROD_NO AND
        :new.PJT_NO = PJT_SUP_PROD.PJT_NO AND
        :new.PROD_SEQ = PJT_SUP_PROD.PROD_SEQ;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert OTHER_SW_SETUP because PJT_SUP_PROD does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* OTHER_SW R/45 OTHER_SW_SETUP on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="OTHER_SW"
    CHILD_OWNER="", CHILD_TABLE="OTHER_SW_SETUP"
    P2C_VERB_PHRASE="R/45", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="SW_NO" */
    SELECT count(*) INTO NUMROWS
      FROM OTHER_SW
      WHERE
        /* %JoinFKPK(:%New,OTHER_SW," = "," AND") */
        :new.SW_NO = OTHER_SW.SW_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert OTHER_SW_SETUP because OTHER_SW does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_OTHER_SW_SETUP AFTER UPDATE ON OTHER_SW_SETUP for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on OTHER_SW_SETUP 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT_SUP_PROD R/44 OTHER_SW_SETUP on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00023b7e", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="OTHER_SW_SETUP"
    P2C_VERB_PHRASE="R/44", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
  SELECT count(*) INTO NUMROWS
    FROM PJT_SUP_PROD
    WHERE
      /* %JoinFKPK(:%New,PJT_SUP_PROD," = "," AND") */
      :new.PROD_NO = PJT_SUP_PROD.PROD_NO AND
      :new.PJT_NO = PJT_SUP_PROD.PJT_NO AND
      :new.PROD_SEQ = PJT_SUP_PROD.PROD_SEQ;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update OTHER_SW_SETUP because PJT_SUP_PROD does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* OTHER_SW R/45 OTHER_SW_SETUP on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="OTHER_SW"
    CHILD_OWNER="", CHILD_TABLE="OTHER_SW_SETUP"
    P2C_VERB_PHRASE="R/45", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_45", FK_COLUMNS="SW_NO" */
  SELECT count(*) INTO NUMROWS
    FROM OTHER_SW
    WHERE
      /* %JoinFKPK(:%New,OTHER_SW," = "," AND") */
      :new.SW_NO = OTHER_SW.SW_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update OTHER_SW_SETUP because OTHER_SW does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tD_PJT AFTER DELETE ON PJT for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- DELETE trigger on PJT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT R/27 PJT_SUP_PROD on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00049247", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/27", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="PJT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PJT_SUP_PROD
      WHERE
        /*  %JoinFKPK(PJT_SUP_PROD,:%Old," = "," AND") */
        PJT_SUP_PROD.PJT_NO = :old.PJT_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PJT because PJT_SUP_PROD exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT R/40 PJT_CHMAN on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_CHMAN"
    P2C_VERB_PHRASE="R/40", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="PJT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PJT_CHMAN
      WHERE
        /*  %JoinFKPK(PJT_CHMAN,:%Old," = "," AND") */
        PJT_CHMAN.PJT_NO = :old.PJT_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PJT because PJT_CHMAN exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT R/69 PJT_MEMO on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_MEMO"
    P2C_VERB_PHRASE="R/69", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_69", FK_COLUMNS="PJT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PJT_MEMO
      WHERE
        /*  %JoinFKPK(PJT_MEMO,:%Old," = "," AND") */
        PJT_MEMO.PJT_NO = :old.PJT_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PJT because PJT_MEMO exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT R/70 CONTRACT on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/70", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="PJT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CONTRACT
      WHERE
        /*  %JoinFKPK(CONTRACT,:%Old," = "," AND") */
        CONTRACT.PJT_NO = :old.PJT_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PJT because CONTRACT exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT R/80 TECH_SUP_APP on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_APP"
    P2C_VERB_PHRASE="R/80", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_80", FK_COLUMNS="PJT_NO" */
    UPDATE TECH_SUP_APP
      SET
        /* %SetFK(TECH_SUP_APP,NULL) */
        TECH_SUP_APP.PJT_NO = NULL
      WHERE
        /* %JoinFKPK(TECH_SUP_APP,:%Old," = "," AND") */
        TECH_SUP_APP.PJT_NO = :old.PJT_NO;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_PJT AFTER UPDATE ON PJT for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on PJT 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT R/27 PJT_SUP_PROD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00053106", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/27", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="PJT_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PJT.PJT_NO <> PJT.PJT_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PJT_SUP_PROD
      WHERE
        /*  %JoinFKPK(PJT_SUP_PROD,:%Old," = "," AND") */
        PJT_SUP_PROD.PJT_NO = :old.PJT_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PJT because PJT_SUP_PROD exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT R/40 PJT_CHMAN on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_CHMAN"
    P2C_VERB_PHRASE="R/40", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="PJT_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PJT.PJT_NO <> PJT.PJT_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PJT_CHMAN
      WHERE
        /*  %JoinFKPK(PJT_CHMAN,:%Old," = "," AND") */
        PJT_CHMAN.PJT_NO = :old.PJT_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PJT because PJT_CHMAN exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT R/69 PJT_MEMO on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_MEMO"
    P2C_VERB_PHRASE="R/69", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_69", FK_COLUMNS="PJT_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PJT.PJT_NO <> PJT.PJT_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PJT_MEMO
      WHERE
        /*  %JoinFKPK(PJT_MEMO,:%Old," = "," AND") */
        PJT_MEMO.PJT_NO = :old.PJT_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PJT because PJT_MEMO exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT R/70 CONTRACT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="CONTRACT"
    P2C_VERB_PHRASE="R/70", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="PJT_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PJT.PJT_NO <> PJT.PJT_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM CONTRACT
      WHERE
        /*  %JoinFKPK(CONTRACT,:%Old," = "," AND") */
        CONTRACT.PJT_NO = :old.PJT_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PJT because CONTRACT exists.'
      );
    END IF;
  END IF;

  /* PJT R/80 TECH_SUP_APP on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_APP"
    P2C_VERB_PHRASE="R/80", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_80", FK_COLUMNS="PJT_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PJT.PJT_NO <> PJT.PJT_NO
  THEN
    UPDATE TECH_SUP_APP
      SET
        /* %SetFK(TECH_SUP_APP,NULL) */
        TECH_SUP_APP.PJT_NO = NULL
      WHERE
        /* %JoinFKPK(TECH_SUP_APP,:%Old," = ",",") */
        TECH_SUP_APP.PJT_NO = :old.PJT_NO;
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_PJT_CHMAN BEFORE INSERT ON PJT_CHMAN for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on PJT_CHMAN 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT R/40 PJT_CHMAN on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001fc6b", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_CHMAN"
    P2C_VERB_PHRASE="R/40", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="PJT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PJT
      WHERE
        /* %JoinFKPK(:%New,PJT," = "," AND") */
        :new.PJT_NO = PJT.PJT_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PJT_CHMAN because PJT does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CHMAN R/58 PJT_CHMAN on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PJT_CHMAN"
    P2C_VERB_PHRASE="R/58", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CHMAN
      WHERE
        /* %JoinFKPK(:%New,CHMAN," = "," AND") */
        :new.CHMAN_NO = CHMAN.CHMAN_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PJT_CHMAN because CHMAN does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_PJT_CHMAN AFTER UPDATE ON PJT_CHMAN for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on PJT_CHMAN 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT R/40 PJT_CHMAN on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001f38b", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_CHMAN"
    P2C_VERB_PHRASE="R/40", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_40", FK_COLUMNS="PJT_NO" */
  SELECT count(*) INTO NUMROWS
    FROM PJT
    WHERE
      /* %JoinFKPK(:%New,PJT," = "," AND") */
      :new.PJT_NO = PJT.PJT_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PJT_CHMAN because PJT does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CHMAN R/58 PJT_CHMAN on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PJT_CHMAN"
    P2C_VERB_PHRASE="R/58", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_58", FK_COLUMNS="CHMAN_NO" */
  SELECT count(*) INTO NUMROWS
    FROM CHMAN
    WHERE
      /* %JoinFKPK(:%New,CHMAN," = "," AND") */
      :new.CHMAN_NO = CHMAN.CHMAN_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PJT_CHMAN because CHMAN does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_PJT_MEMO BEFORE INSERT ON PJT_MEMO for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on PJT_MEMO 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT R/69 PJT_MEMO on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001ee90", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_MEMO"
    P2C_VERB_PHRASE="R/69", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_69", FK_COLUMNS="PJT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PJT
      WHERE
        /* %JoinFKPK(:%New,PJT," = "," AND") */
        :new.PJT_NO = PJT.PJT_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PJT_MEMO because PJT does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CHMAN R/70 PJT_MEMO on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PJT_MEMO"
    P2C_VERB_PHRASE="R/70", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CHMAN
      WHERE
        /* %JoinFKPK(:%New,CHMAN," = "," AND") */
        :new.CHMAN_NO = CHMAN.CHMAN_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PJT_MEMO because CHMAN does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_PJT_MEMO AFTER UPDATE ON PJT_MEMO for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on PJT_MEMO 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT R/69 PJT_MEMO on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001e961", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_MEMO"
    P2C_VERB_PHRASE="R/69", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_69", FK_COLUMNS="PJT_NO" */
  SELECT count(*) INTO NUMROWS
    FROM PJT
    WHERE
      /* %JoinFKPK(:%New,PJT," = "," AND") */
      :new.PJT_NO = PJT.PJT_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PJT_MEMO because PJT does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CHMAN R/70 PJT_MEMO on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PJT_MEMO"
    P2C_VERB_PHRASE="R/70", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_70", FK_COLUMNS="CHMAN_NO" */
  SELECT count(*) INTO NUMROWS
    FROM CHMAN
    WHERE
      /* %JoinFKPK(:%New,CHMAN," = "," AND") */
      :new.CHMAN_NO = CHMAN.CHMAN_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PJT_MEMO because CHMAN does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_PJT_SUP_PROD BEFORE INSERT ON PJT_SUP_PROD for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on PJT_SUP_PROD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/26 PJT_SUP_PROD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0002f525", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/26", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_26", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PROD
      WHERE
        /* %JoinFKPK(:%New,PROD," = "," AND") */
        :new.PROD_NO = PROD.PROD_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PJT_SUP_PROD because PROD does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT R/27 PJT_SUP_PROD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/27", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="PJT_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PJT
      WHERE
        /* %JoinFKPK(:%New,PJT," = "," AND") */
        :new.PJT_NO = PJT.PJT_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PJT_SUP_PROD because PJT does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* OS R/33 PJT_SUP_PROD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="OS"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/33", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="SETUP_OS_NO" */
    SELECT count(*) INTO NUMROWS
      FROM OS
      WHERE
        /* %JoinFKPK(:%New,OS," = "," AND") */
        :new.SETUP_OS_NO = OS.OS_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PJT_SUP_PROD because OS does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tD_PJT_SUP_PROD AFTER DELETE ON PJT_SUP_PROD for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- DELETE trigger on PJT_SUP_PROD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT_SUP_PROD R/44 OTHER_SW_SETUP on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="000388f9", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="OTHER_SW_SETUP"
    P2C_VERB_PHRASE="R/44", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
    SELECT count(*) INTO NUMROWS
      FROM OTHER_SW_SETUP
      WHERE
        /*  %JoinFKPK(OTHER_SW_SETUP,:%Old," = "," AND") */
        OTHER_SW_SETUP.PROD_NO = :old.PROD_NO AND
        OTHER_SW_SETUP.PJT_NO = :old.PJT_NO AND
        OTHER_SW_SETUP.PROD_SEQ = :old.PROD_SEQ;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PJT_SUP_PROD because OTHER_SW_SETUP exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT_SUP_PROD R/47 PROD_LOG_PATH on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_LOG_PATH"
    P2C_VERB_PHRASE="R/47", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
    SELECT count(*) INTO NUMROWS
      FROM PROD_LOG_PATH
      WHERE
        /*  %JoinFKPK(PROD_LOG_PATH,:%Old," = "," AND") */
        PROD_LOG_PATH.PROD_NO = :old.PROD_NO AND
        PROD_LOG_PATH.PJT_NO = :old.PJT_NO AND
        PROD_LOG_PATH.PROD_SEQ = :old.PROD_SEQ;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PJT_SUP_PROD because PROD_LOG_PATH exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT_SUP_PROD R/68 SET_FILE_PATH on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="SET_FILE_PATH"
    P2C_VERB_PHRASE="R/68", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_68", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
    SELECT count(*) INTO NUMROWS
      FROM SET_FILE_PATH
      WHERE
        /*  %JoinFKPK(SET_FILE_PATH,:%Old," = "," AND") */
        SET_FILE_PATH.PROD_NO = :old.PROD_NO AND
        SET_FILE_PATH.PJT_NO = :old.PJT_NO AND
        SET_FILE_PATH.PROD_SEQ = :old.PROD_SEQ;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PJT_SUP_PROD because SET_FILE_PATH exists.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_PJT_SUP_PROD AFTER UPDATE ON PJT_SUP_PROD for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on PJT_SUP_PROD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT_SUP_PROD R/44 OTHER_SW_SETUP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0007b0fa", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="OTHER_SW_SETUP"
    P2C_VERB_PHRASE="R/44", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_44", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PJT_SUP_PROD.PROD_NO <> PJT_SUP_PROD.PROD_NO OR 
    PJT_SUP_PROD.PJT_NO <> PJT_SUP_PROD.PJT_NO OR 
    PJT_SUP_PROD.PROD_SEQ <> PJT_SUP_PROD.PROD_SEQ
  THEN
    SELECT count(*) INTO NUMROWS
      FROM OTHER_SW_SETUP
      WHERE
        /*  %JoinFKPK(OTHER_SW_SETUP,:%Old," = "," AND") */
        OTHER_SW_SETUP.PROD_NO = :old.PROD_NO AND
        OTHER_SW_SETUP.PJT_NO = :old.PJT_NO AND
        OTHER_SW_SETUP.PROD_SEQ = :old.PROD_SEQ;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PJT_SUP_PROD because OTHER_SW_SETUP exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT_SUP_PROD R/47 PROD_LOG_PATH on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_LOG_PATH"
    P2C_VERB_PHRASE="R/47", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PJT_SUP_PROD.PROD_NO <> PJT_SUP_PROD.PROD_NO OR 
    PJT_SUP_PROD.PJT_NO <> PJT_SUP_PROD.PJT_NO OR 
    PJT_SUP_PROD.PROD_SEQ <> PJT_SUP_PROD.PROD_SEQ
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PROD_LOG_PATH
      WHERE
        /*  %JoinFKPK(PROD_LOG_PATH,:%Old," = "," AND") */
        PROD_LOG_PATH.PROD_NO = :old.PROD_NO AND
        PROD_LOG_PATH.PJT_NO = :old.PJT_NO AND
        PROD_LOG_PATH.PROD_SEQ = :old.PROD_SEQ;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PJT_SUP_PROD because PROD_LOG_PATH exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT_SUP_PROD R/68 SET_FILE_PATH on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="SET_FILE_PATH"
    P2C_VERB_PHRASE="R/68", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_68", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PJT_SUP_PROD.PROD_NO <> PJT_SUP_PROD.PROD_NO OR 
    PJT_SUP_PROD.PJT_NO <> PJT_SUP_PROD.PJT_NO OR 
    PJT_SUP_PROD.PROD_SEQ <> PJT_SUP_PROD.PROD_SEQ
  THEN
    SELECT count(*) INTO NUMROWS
      FROM SET_FILE_PATH
      WHERE
        /*  %JoinFKPK(SET_FILE_PATH,:%Old," = "," AND") */
        SET_FILE_PATH.PROD_NO = :old.PROD_NO AND
        SET_FILE_PATH.PJT_NO = :old.PJT_NO AND
        SET_FILE_PATH.PROD_SEQ = :old.PROD_SEQ;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PJT_SUP_PROD because SET_FILE_PATH exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/26 PJT_SUP_PROD on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/26", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_26", FK_COLUMNS="PROD_NO" */
  SELECT count(*) INTO NUMROWS
    FROM PROD
    WHERE
      /* %JoinFKPK(:%New,PROD," = "," AND") */
      :new.PROD_NO = PROD.PROD_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PJT_SUP_PROD because PROD does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT R/27 PJT_SUP_PROD on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/27", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_27", FK_COLUMNS="PJT_NO" */
  SELECT count(*) INTO NUMROWS
    FROM PJT
    WHERE
      /* %JoinFKPK(:%New,PJT," = "," AND") */
      :new.PJT_NO = PJT.PJT_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PJT_SUP_PROD because PJT does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* OS R/33 PJT_SUP_PROD on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="OS"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/33", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_33", FK_COLUMNS="SETUP_OS_NO" */
  SELECT count(*) INTO NUMROWS
    FROM OS
    WHERE
      /* %JoinFKPK(:%New,OS," = "," AND") */
      :new.SETUP_OS_NO = OS.OS_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PJT_SUP_PROD because OS does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tD_PROD AFTER DELETE ON PROD for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- DELETE trigger on PROD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/12 TECH_SUP_PROD on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="0005f3be", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_PROD"
    P2C_VERB_PHRASE="R/12", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_PROD
      WHERE
        /*  %JoinFKPK(TECH_SUP_PROD,:%Old," = "," AND") */
        TECH_SUP_PROD.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PROD because TECH_SUP_PROD exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/26 PJT_SUP_PROD on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/26", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_26", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PJT_SUP_PROD
      WHERE
        /*  %JoinFKPK(PJT_SUP_PROD,:%Old," = "," AND") */
        PJT_SUP_PROD.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PROD because PJT_SUP_PROD exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/34 CONT_PROD on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="CONT_PROD"
    P2C_VERB_PHRASE="R/34", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CONT_PROD
      WHERE
        /*  %JoinFKPK(CONT_PROD,:%Old," = "," AND") */
        CONT_PROD.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PROD because CONT_PROD exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/64 PROD_RECMD_SW on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_RECMD_SW"
    P2C_VERB_PHRASE="R/64", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_64", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PROD_RECMD_SW
      WHERE
        /*  %JoinFKPK(PROD_RECMD_SW,:%Old," = "," AND") */
        PROD_RECMD_SW.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PROD because PROD_RECMD_SW exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/66 PROD_DEV_CHMAN on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_DEV_CHMAN"
    P2C_VERB_PHRASE="R/66", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PROD_DEV_CHMAN
      WHERE
        /*  %JoinFKPK(PROD_DEV_CHMAN,:%Old," = "," AND") */
        PROD_DEV_CHMAN.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PROD because PROD_DEV_CHMAN exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/77 RECMD_OS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="RECMD_OS"
    P2C_VERB_PHRASE="R/77", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_77", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM RECMD_OS
      WHERE
        /*  %JoinFKPK(RECMD_OS,:%Old," = "," AND") */
        RECMD_OS.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete PROD because RECMD_OS exists.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_PROD AFTER UPDATE ON PROD for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on PROD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/12 TECH_SUP_PROD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0006c2be", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_PROD"
    P2C_VERB_PHRASE="R/12", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="PROD_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PROD.PROD_NO <> PROD.PROD_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_PROD
      WHERE
        /*  %JoinFKPK(TECH_SUP_PROD,:%Old," = "," AND") */
        TECH_SUP_PROD.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PROD because TECH_SUP_PROD exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/26 PJT_SUP_PROD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PJT_SUP_PROD"
    P2C_VERB_PHRASE="R/26", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_26", FK_COLUMNS="PROD_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PROD.PROD_NO <> PROD.PROD_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PJT_SUP_PROD
      WHERE
        /*  %JoinFKPK(PJT_SUP_PROD,:%Old," = "," AND") */
        PJT_SUP_PROD.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PROD because PJT_SUP_PROD exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/34 CONT_PROD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="CONT_PROD"
    P2C_VERB_PHRASE="R/34", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_34", FK_COLUMNS="PROD_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PROD.PROD_NO <> PROD.PROD_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM CONT_PROD
      WHERE
        /*  %JoinFKPK(CONT_PROD,:%Old," = "," AND") */
        CONT_PROD.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PROD because CONT_PROD exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/64 PROD_RECMD_SW on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_RECMD_SW"
    P2C_VERB_PHRASE="R/64", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_64", FK_COLUMNS="PROD_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PROD.PROD_NO <> PROD.PROD_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PROD_RECMD_SW
      WHERE
        /*  %JoinFKPK(PROD_RECMD_SW,:%Old," = "," AND") */
        PROD_RECMD_SW.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PROD because PROD_RECMD_SW exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/66 PROD_DEV_CHMAN on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_DEV_CHMAN"
    P2C_VERB_PHRASE="R/66", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="PROD_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PROD.PROD_NO <> PROD.PROD_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM PROD_DEV_CHMAN
      WHERE
        /*  %JoinFKPK(PROD_DEV_CHMAN,:%Old," = "," AND") */
        PROD_DEV_CHMAN.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PROD because PROD_DEV_CHMAN exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/77 RECMD_OS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="RECMD_OS"
    P2C_VERB_PHRASE="R/77", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_77", FK_COLUMNS="PROD_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    PROD.PROD_NO <> PROD.PROD_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM RECMD_OS
      WHERE
        /*  %JoinFKPK(RECMD_OS,:%Old," = "," AND") */
        RECMD_OS.PROD_NO = :old.PROD_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update PROD because RECMD_OS exists.'
      );
    END IF;
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_PROD_DEV_CHMAN BEFORE INSERT ON PROD_DEV_CHMAN for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on PROD_DEV_CHMAN 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/66 PROD_DEV_CHMAN on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001fc58", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_DEV_CHMAN"
    P2C_VERB_PHRASE="R/66", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PROD
      WHERE
        /* %JoinFKPK(:%New,PROD," = "," AND") */
        :new.PROD_NO = PROD.PROD_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PROD_DEV_CHMAN because PROD does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CHMAN R/67 PROD_DEV_CHMAN on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PROD_DEV_CHMAN"
    P2C_VERB_PHRASE="R/67", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_67", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CHMAN
      WHERE
        /* %JoinFKPK(:%New,CHMAN," = "," AND") */
        :new.CHMAN_NO = CHMAN.CHMAN_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PROD_DEV_CHMAN because CHMAN does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_PROD_DEV_CHMAN AFTER UPDATE ON PROD_DEV_CHMAN for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on PROD_DEV_CHMAN 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/66 PROD_DEV_CHMAN on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00020581", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_DEV_CHMAN"
    P2C_VERB_PHRASE="R/66", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_66", FK_COLUMNS="PROD_NO" */
  SELECT count(*) INTO NUMROWS
    FROM PROD
    WHERE
      /* %JoinFKPK(:%New,PROD," = "," AND") */
      :new.PROD_NO = PROD.PROD_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PROD_DEV_CHMAN because PROD does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CHMAN R/67 PROD_DEV_CHMAN on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="PROD_DEV_CHMAN"
    P2C_VERB_PHRASE="R/67", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_67", FK_COLUMNS="CHMAN_NO" */
  SELECT count(*) INTO NUMROWS
    FROM CHMAN
    WHERE
      /* %JoinFKPK(:%New,CHMAN," = "," AND") */
      :new.CHMAN_NO = CHMAN.CHMAN_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PROD_DEV_CHMAN because CHMAN does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_PROD_LOG_PATH BEFORE INSERT ON PROD_LOG_PATH for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on PROD_LOG_PATH 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT_SUP_PROD R/47 PROD_LOG_PATH on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001352a", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_LOG_PATH"
    P2C_VERB_PHRASE="R/47", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
    SELECT count(*) INTO NUMROWS
      FROM PJT_SUP_PROD
      WHERE
        /* %JoinFKPK(:%New,PJT_SUP_PROD," = "," AND") */
        :new.PROD_NO = PJT_SUP_PROD.PROD_NO AND
        :new.PJT_NO = PJT_SUP_PROD.PJT_NO AND
        :new.PROD_SEQ = PJT_SUP_PROD.PROD_SEQ;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PROD_LOG_PATH because PJT_SUP_PROD does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_PROD_LOG_PATH AFTER UPDATE ON PROD_LOG_PATH for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on PROD_LOG_PATH 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT_SUP_PROD R/47 PROD_LOG_PATH on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00013e23", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_LOG_PATH"
    P2C_VERB_PHRASE="R/47", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_47", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
  SELECT count(*) INTO NUMROWS
    FROM PJT_SUP_PROD
    WHERE
      /* %JoinFKPK(:%New,PJT_SUP_PROD," = "," AND") */
      :new.PROD_NO = PJT_SUP_PROD.PROD_NO AND
      :new.PJT_NO = PJT_SUP_PROD.PJT_NO AND
      :new.PROD_SEQ = PJT_SUP_PROD.PROD_SEQ;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PROD_LOG_PATH because PJT_SUP_PROD does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_PROD_RECMD_SW BEFORE INSERT ON PROD_RECMD_SW for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on PROD_RECMD_SW 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/64 PROD_RECMD_SW on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00020593", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_RECMD_SW"
    P2C_VERB_PHRASE="R/64", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_64", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PROD
      WHERE
        /* %JoinFKPK(:%New,PROD," = "," AND") */
        :new.PROD_NO = PROD.PROD_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PROD_RECMD_SW because PROD does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* OTHER_SW R/65 PROD_RECMD_SW on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="OTHER_SW"
    CHILD_OWNER="", CHILD_TABLE="PROD_RECMD_SW"
    P2C_VERB_PHRASE="R/65", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="SW_NO" */
    SELECT count(*) INTO NUMROWS
      FROM OTHER_SW
      WHERE
        /* %JoinFKPK(:%New,OTHER_SW," = "," AND") */
        :new.SW_NO = OTHER_SW.SW_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert PROD_RECMD_SW because OTHER_SW does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_PROD_RECMD_SW AFTER UPDATE ON PROD_RECMD_SW for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on PROD_RECMD_SW 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/64 PROD_RECMD_SW on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000203a6", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="PROD_RECMD_SW"
    P2C_VERB_PHRASE="R/64", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_64", FK_COLUMNS="PROD_NO" */
  SELECT count(*) INTO NUMROWS
    FROM PROD
    WHERE
      /* %JoinFKPK(:%New,PROD," = "," AND") */
      :new.PROD_NO = PROD.PROD_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PROD_RECMD_SW because PROD does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* OTHER_SW R/65 PROD_RECMD_SW on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="OTHER_SW"
    CHILD_OWNER="", CHILD_TABLE="PROD_RECMD_SW"
    P2C_VERB_PHRASE="R/65", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_65", FK_COLUMNS="SW_NO" */
  SELECT count(*) INTO NUMROWS
    FROM OTHER_SW
    WHERE
      /* %JoinFKPK(:%New,OTHER_SW," = "," AND") */
      :new.SW_NO = OTHER_SW.SW_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update PROD_RECMD_SW because OTHER_SW does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_RECMD_OS BEFORE INSERT ON RECMD_OS for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on RECMD_OS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* OS R/76 RECMD_OS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="0001e6e6", PARENT_OWNER="", PARENT_TABLE="OS"
    CHILD_OWNER="", CHILD_TABLE="RECMD_OS"
    P2C_VERB_PHRASE="R/76", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_76", FK_COLUMNS="OS_NO" */
    SELECT count(*) INTO NUMROWS
      FROM OS
      WHERE
        /* %JoinFKPK(:%New,OS," = "," AND") */
        :new.OS_NO = OS.OS_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert RECMD_OS because OS does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/77 RECMD_OS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="RECMD_OS"
    P2C_VERB_PHRASE="R/77", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_77", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PROD
      WHERE
        /* %JoinFKPK(:%New,PROD," = "," AND") */
        :new.PROD_NO = PROD.PROD_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert RECMD_OS because PROD does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_RECMD_OS AFTER UPDATE ON RECMD_OS for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on RECMD_OS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* OS R/76 RECMD_OS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0001ebfe", PARENT_OWNER="", PARENT_TABLE="OS"
    CHILD_OWNER="", CHILD_TABLE="RECMD_OS"
    P2C_VERB_PHRASE="R/76", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_76", FK_COLUMNS="OS_NO" */
  SELECT count(*) INTO NUMROWS
    FROM OS
    WHERE
      /* %JoinFKPK(:%New,OS," = "," AND") */
      :new.OS_NO = OS.OS_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update RECMD_OS because OS does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/77 RECMD_OS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="RECMD_OS"
    P2C_VERB_PHRASE="R/77", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_77", FK_COLUMNS="PROD_NO" */
  SELECT count(*) INTO NUMROWS
    FROM PROD
    WHERE
      /* %JoinFKPK(:%New,PROD," = "," AND") */
      :new.PROD_NO = PROD.PROD_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update RECMD_OS because PROD does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_SET_FILE_PATH BEFORE INSERT ON SET_FILE_PATH for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on SET_FILE_PATH 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT_SUP_PROD R/68 SET_FILE_PATH on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000132cf", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="SET_FILE_PATH"
    P2C_VERB_PHRASE="R/68", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_68", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
    SELECT count(*) INTO NUMROWS
      FROM PJT_SUP_PROD
      WHERE
        /* %JoinFKPK(:%New,PJT_SUP_PROD," = "," AND") */
        :new.PROD_NO = PJT_SUP_PROD.PROD_NO AND
        :new.PJT_NO = PJT_SUP_PROD.PJT_NO AND
        :new.PROD_SEQ = PJT_SUP_PROD.PROD_SEQ;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert SET_FILE_PATH because PJT_SUP_PROD does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_SET_FILE_PATH AFTER UPDATE ON SET_FILE_PATH for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on SET_FILE_PATH 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PJT_SUP_PROD R/68 SET_FILE_PATH on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="000136ac", PARENT_OWNER="", PARENT_TABLE="PJT_SUP_PROD"
    CHILD_OWNER="", CHILD_TABLE="SET_FILE_PATH"
    P2C_VERB_PHRASE="R/68", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_68", FK_COLUMNS="PROD_NO""PJT_NO""PROD_SEQ" */
  SELECT count(*) INTO NUMROWS
    FROM PJT_SUP_PROD
    WHERE
      /* %JoinFKPK(:%New,PJT_SUP_PROD," = "," AND") */
      :new.PROD_NO = PJT_SUP_PROD.PROD_NO AND
      :new.PJT_NO = PJT_SUP_PROD.PJT_NO AND
      :new.PROD_SEQ = PJT_SUP_PROD.PROD_SEQ;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update SET_FILE_PATH because PJT_SUP_PROD does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tD_SIGN_IMG AFTER DELETE ON SIGN_IMG for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- DELETE trigger on SIGN_IMG 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* SIGN_IMG R/51 CHMAN on parent delete set null */
    /* ERWIN_RELATION:CHECKSUM="0000c224", PARENT_OWNER="", PARENT_TABLE="SIGN_IMG"
    CHILD_OWNER="", CHILD_TABLE="CHMAN"
    P2C_VERB_PHRASE="R/51", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_51", FK_COLUMNS="SIGN_IMG_NO" */
    UPDATE CHMAN
      SET
        /* %SetFK(CHMAN,NULL) */
        CHMAN.SIGN_IMG_NO = NULL
      WHERE
        /* %JoinFKPK(CHMAN,:%Old," = "," AND") */
        CHMAN.SIGN_IMG_NO = :old.SIGN_IMG_NO;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_SIGN_IMG AFTER UPDATE ON SIGN_IMG for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on SIGN_IMG 
DECLARE NUMROWS INTEGER;
BEGIN
  /* SIGN_IMG R/51 CHMAN on parent update set null */
  /* ERWIN_RELATION:CHECKSUM="0000ebeb", PARENT_OWNER="", PARENT_TABLE="SIGN_IMG"
    CHILD_OWNER="", CHILD_TABLE="CHMAN"
    P2C_VERB_PHRASE="R/51", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_51", FK_COLUMNS="SIGN_IMG_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    SIGN_IMG.SIGN_IMG_NO <> SIGN_IMG.SIGN_IMG_NO
  THEN
    UPDATE CHMAN
      SET
        /* %SetFK(CHMAN,NULL) */
        CHMAN.SIGN_IMG_NO = NULL
      WHERE
        /* %JoinFKPK(CHMAN,:%Old," = ",",") */
        CHMAN.SIGN_IMG_NO = :old.SIGN_IMG_NO;
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_TECH_SUP BEFORE INSERT ON TECH_SUP for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on TECH_SUP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* TECH_SUP_APP R/81 TECH_SUP on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00010459", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP"
    P2C_VERB_PHRASE="R/81", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_81", FK_COLUMNS="TECH_SUP_APP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_APP
      WHERE
        /* %JoinFKPK(:%New,TECH_SUP_APP," = "," AND") */
        :new.TECH_SUP_APP_NO = TECH_SUP_APP.TECH_SUP_APP_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TECH_SUP because TECH_SUP_APP does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tD_TECH_SUP AFTER DELETE ON TECH_SUP for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- DELETE trigger on TECH_SUP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* TECH_SUP R/13 TECH_SUP_PROD on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00020307", PARENT_OWNER="", PARENT_TABLE="TECH_SUP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_PROD"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="TECH_SUP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_PROD
      WHERE
        /*  %JoinFKPK(TECH_SUP_PROD,:%Old," = "," AND") */
        TECH_SUP_PROD.TECH_SUP_NO = :old.TECH_SUP_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TECH_SUP because TECH_SUP_PROD exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* TECH_SUP R/71 TECH_SUP_SUBMIT on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TECH_SUP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SUBMIT"
    P2C_VERB_PHRASE="R/71", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_71", FK_COLUMNS="TECH_SUP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_SUBMIT
      WHERE
        /*  %JoinFKPK(TECH_SUP_SUBMIT,:%Old," = "," AND") */
        TECH_SUP_SUBMIT.TECH_SUP_NO = :old.TECH_SUP_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TECH_SUP because TECH_SUP_SUBMIT exists.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_TECH_SUP AFTER UPDATE ON TECH_SUP for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on TECH_SUP 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* TECH_SUP R/13 TECH_SUP_PROD on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00038bdf", PARENT_OWNER="", PARENT_TABLE="TECH_SUP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_PROD"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="TECH_SUP_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    TECH_SUP.TECH_SUP_NO <> TECH_SUP.TECH_SUP_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_PROD
      WHERE
        /*  %JoinFKPK(TECH_SUP_PROD,:%Old," = "," AND") */
        TECH_SUP_PROD.TECH_SUP_NO = :old.TECH_SUP_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TECH_SUP because TECH_SUP_PROD exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* TECH_SUP R/71 TECH_SUP_SUBMIT on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TECH_SUP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SUBMIT"
    P2C_VERB_PHRASE="R/71", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_71", FK_COLUMNS="TECH_SUP_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    TECH_SUP.TECH_SUP_NO <> TECH_SUP.TECH_SUP_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_SUBMIT
      WHERE
        /*  %JoinFKPK(TECH_SUP_SUBMIT,:%Old," = "," AND") */
        TECH_SUP_SUBMIT.TECH_SUP_NO = :old.TECH_SUP_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TECH_SUP because TECH_SUP_SUBMIT exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* TECH_SUP_APP R/81 TECH_SUP on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP"
    P2C_VERB_PHRASE="R/81", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_81", FK_COLUMNS="TECH_SUP_APP_NO" */
  SELECT count(*) INTO NUMROWS
    FROM TECH_SUP_APP
    WHERE
      /* %JoinFKPK(:%New,TECH_SUP_APP," = "," AND") */
      :new.TECH_SUP_APP_NO = TECH_SUP_APP.TECH_SUP_APP_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TECH_SUP because TECH_SUP_APP does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_TECH_SUP_APP BEFORE INSERT ON TECH_SUP_APP for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on TECH_SUP_APP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT R/80 TECH_SUP_APP on child insert set null */
    /* ERWIN_RELATION:CHECKSUM="0001050a", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_APP"
    P2C_VERB_PHRASE="R/80", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_80", FK_COLUMNS="PJT_NO" */
    UPDATE TECH_SUP_APP
      SET
        /* %SetFK(TECH_SUP_APP,NULL) */
        TECH_SUP_APP.PJT_NO = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM PJT
            WHERE
              /* %JoinFKPK(:%New,PJT," = "," AND") */
              :new.PJT_NO = PJT.PJT_NO
        ) 
        /* %JoinPKPK(TECH_SUP_APP,:%New," = "," AND") */
         and TECH_SUP_APP.TECH_SUP_APP_NO = TECH_SUP_APP.TECH_SUP_APP_NO;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tD_TECH_SUP_APP AFTER DELETE ON TECH_SUP_APP for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- DELETE trigger on TECH_SUP_APP 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* TECH_SUP_APP R/78 TECH_SUP_CHMAN on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00034782", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_CHMAN"
    P2C_VERB_PHRASE="R/78", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_78", FK_COLUMNS="TECH_SUP_APP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_CHMAN
      WHERE
        /*  %JoinFKPK(TECH_SUP_CHMAN,:%Old," = "," AND") */
        TECH_SUP_CHMAN.TECH_SUP_APP_NO = :old.TECH_SUP_APP_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TECH_SUP_APP because TECH_SUP_CHMAN exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* TECH_SUP_APP R/81 TECH_SUP on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP"
    P2C_VERB_PHRASE="R/81", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_81", FK_COLUMNS="TECH_SUP_APP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP
      WHERE
        /*  %JoinFKPK(TECH_SUP,:%Old," = "," AND") */
        TECH_SUP.TECH_SUP_APP_NO = :old.TECH_SUP_APP_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TECH_SUP_APP because TECH_SUP exists.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* TECH_SUP_APP R/82 TECH_SUP_SEQ_STATUS on parent delete restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SEQ_STATUS"
    P2C_VERB_PHRASE="R/82", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_82", FK_COLUMNS="TECH_SUP_APP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_SEQ_STATUS
      WHERE
        /*  %JoinFKPK(TECH_SUP_SEQ_STATUS,:%Old," = "," AND") */
        TECH_SUP_SEQ_STATUS.TECH_SUP_APP_NO = :old.TECH_SUP_APP_NO;
    IF (NUMROWS > 0)
    THEN
      raise_application_error(
        -20001,
        'Cannot delete TECH_SUP_APP because TECH_SUP_SEQ_STATUS exists.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_TECH_SUP_APP AFTER UPDATE ON TECH_SUP_APP for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on TECH_SUP_APP 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* TECH_SUP_APP R/78 TECH_SUP_CHMAN on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="0004ee11", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_CHMAN"
    P2C_VERB_PHRASE="R/78", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_78", FK_COLUMNS="TECH_SUP_APP_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    TECH_SUP_APP.TECH_SUP_APP_NO <> TECH_SUP_APP.TECH_SUP_APP_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_CHMAN
      WHERE
        /*  %JoinFKPK(TECH_SUP_CHMAN,:%Old," = "," AND") */
        TECH_SUP_CHMAN.TECH_SUP_APP_NO = :old.TECH_SUP_APP_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TECH_SUP_APP because TECH_SUP_CHMAN exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* TECH_SUP_APP R/81 TECH_SUP on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP"
    P2C_VERB_PHRASE="R/81", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_81", FK_COLUMNS="TECH_SUP_APP_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    TECH_SUP_APP.TECH_SUP_APP_NO <> TECH_SUP_APP.TECH_SUP_APP_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP
      WHERE
        /*  %JoinFKPK(TECH_SUP,:%Old," = "," AND") */
        TECH_SUP.TECH_SUP_APP_NO = :old.TECH_SUP_APP_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TECH_SUP_APP because TECH_SUP exists.'
      );
    END IF;
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* TECH_SUP_APP R/82 TECH_SUP_SEQ_STATUS on parent update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SEQ_STATUS"
    P2C_VERB_PHRASE="R/82", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_82", FK_COLUMNS="TECH_SUP_APP_NO" */
  IF
    /* %JoinPKPK(:%Old,:%New," <> "," OR ") */
    TECH_SUP_APP.TECH_SUP_APP_NO <> TECH_SUP_APP.TECH_SUP_APP_NO
  THEN
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_SEQ_STATUS
      WHERE
        /*  %JoinFKPK(TECH_SUP_SEQ_STATUS,:%Old," = "," AND") */
        TECH_SUP_SEQ_STATUS.TECH_SUP_APP_NO = :old.TECH_SUP_APP_NO;
    IF (NUMROWS > 0)
    THEN 
      raise_application_error(
        -20005,
        'Cannot update TECH_SUP_APP because TECH_SUP_SEQ_STATUS exists.'
      );
    END IF;
  END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PJT R/80 TECH_SUP_APP on child update set null */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="PJT"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_APP"
    P2C_VERB_PHRASE="R/80", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_80", FK_COLUMNS="PJT_NO" */
    UPDATE TECH_SUP_APP
      SET
        /* %SetFK(TECH_SUP_APP,NULL) */
        TECH_SUP_APP.PJT_NO = NULL
      WHERE
        NOT EXISTS (
          SELECT * FROM PJT
            WHERE
              /* %JoinFKPK(:%New,PJT," = "," AND") */
              :new.PJT_NO = PJT.PJT_NO
        ) 
        /* %JoinPKPK(TECH_SUP_APP,:%New," = "," AND") */
         and TECH_SUP_APP.TECH_SUP_APP_NO = TECH_SUP_APP.TECH_SUP_APP_NO;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_TECH_SUP_CHMAN BEFORE INSERT ON TECH_SUP_CHMAN for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on TECH_SUP_CHMAN 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CHMAN R/54 TECH_SUP_CHMAN on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00021e6f", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_CHMAN"
    P2C_VERB_PHRASE="R/54", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CHMAN
      WHERE
        /* %JoinFKPK(:%New,CHMAN," = "," AND") */
        :new.CHMAN_NO = CHMAN.CHMAN_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TECH_SUP_CHMAN because CHMAN does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* TECH_SUP_APP R/78 TECH_SUP_CHMAN on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_CHMAN"
    P2C_VERB_PHRASE="R/78", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_78", FK_COLUMNS="TECH_SUP_APP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_APP
      WHERE
        /* %JoinFKPK(:%New,TECH_SUP_APP," = "," AND") */
        :new.TECH_SUP_APP_NO = TECH_SUP_APP.TECH_SUP_APP_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TECH_SUP_CHMAN because TECH_SUP_APP does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_TECH_SUP_CHMAN AFTER UPDATE ON TECH_SUP_CHMAN for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on TECH_SUP_CHMAN 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CHMAN R/54 TECH_SUP_CHMAN on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00022819", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_CHMAN"
    P2C_VERB_PHRASE="R/54", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_54", FK_COLUMNS="CHMAN_NO" */
  SELECT count(*) INTO NUMROWS
    FROM CHMAN
    WHERE
      /* %JoinFKPK(:%New,CHMAN," = "," AND") */
      :new.CHMAN_NO = CHMAN.CHMAN_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TECH_SUP_CHMAN because CHMAN does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* TECH_SUP_APP R/78 TECH_SUP_CHMAN on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_CHMAN"
    P2C_VERB_PHRASE="R/78", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_78", FK_COLUMNS="TECH_SUP_APP_NO" */
  SELECT count(*) INTO NUMROWS
    FROM TECH_SUP_APP
    WHERE
      /* %JoinFKPK(:%New,TECH_SUP_APP," = "," AND") */
      :new.TECH_SUP_APP_NO = TECH_SUP_APP.TECH_SUP_APP_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TECH_SUP_CHMAN because TECH_SUP_APP does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_TECH_SUP_PROD BEFORE INSERT ON TECH_SUP_PROD for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on TECH_SUP_PROD 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* PROD R/12 TECH_SUP_PROD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000211eb", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_PROD"
    P2C_VERB_PHRASE="R/12", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="PROD_NO" */
    SELECT count(*) INTO NUMROWS
      FROM PROD
      WHERE
        /* %JoinFKPK(:%New,PROD," = "," AND") */
        :new.PROD_NO = PROD.PROD_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TECH_SUP_PROD because PROD does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* TECH_SUP R/13 TECH_SUP_PROD on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TECH_SUP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_PROD"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="TECH_SUP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP
      WHERE
        /* %JoinFKPK(:%New,TECH_SUP," = "," AND") */
        :new.TECH_SUP_NO = TECH_SUP.TECH_SUP_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TECH_SUP_PROD because TECH_SUP does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_TECH_SUP_PROD AFTER UPDATE ON TECH_SUP_PROD for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on TECH_SUP_PROD 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* PROD R/12 TECH_SUP_PROD on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002147a", PARENT_OWNER="", PARENT_TABLE="PROD"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_PROD"
    P2C_VERB_PHRASE="R/12", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_12", FK_COLUMNS="PROD_NO" */
  SELECT count(*) INTO NUMROWS
    FROM PROD
    WHERE
      /* %JoinFKPK(:%New,PROD," = "," AND") */
      :new.PROD_NO = PROD.PROD_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TECH_SUP_PROD because PROD does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* TECH_SUP R/13 TECH_SUP_PROD on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="TECH_SUP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_PROD"
    P2C_VERB_PHRASE="R/13", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_13", FK_COLUMNS="TECH_SUP_NO" */
  SELECT count(*) INTO NUMROWS
    FROM TECH_SUP
    WHERE
      /* %JoinFKPK(:%New,TECH_SUP," = "," AND") */
      :new.TECH_SUP_NO = TECH_SUP.TECH_SUP_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TECH_SUP_PROD because TECH_SUP does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_TECH_SUP_SEQ_STATUS BEFORE INSERT ON TECH_SUP_SEQ_STATUS for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on TECH_SUP_SEQ_STATUS 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* TECH_SUP_APP R/82 TECH_SUP_SEQ_STATUS on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00011fbe", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SEQ_STATUS"
    P2C_VERB_PHRASE="R/82", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_82", FK_COLUMNS="TECH_SUP_APP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP_APP
      WHERE
        /* %JoinFKPK(:%New,TECH_SUP_APP," = "," AND") */
        :new.TECH_SUP_APP_NO = TECH_SUP_APP.TECH_SUP_APP_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TECH_SUP_SEQ_STATUS because TECH_SUP_APP does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_TECH_SUP_SEQ_STATUS AFTER UPDATE ON TECH_SUP_SEQ_STATUS for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on TECH_SUP_SEQ_STATUS 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* TECH_SUP_APP R/82 TECH_SUP_SEQ_STATUS on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00011d41", PARENT_OWNER="", PARENT_TABLE="TECH_SUP_APP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SEQ_STATUS"
    P2C_VERB_PHRASE="R/82", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_82", FK_COLUMNS="TECH_SUP_APP_NO" */
  SELECT count(*) INTO NUMROWS
    FROM TECH_SUP_APP
    WHERE
      /* %JoinFKPK(:%New,TECH_SUP_APP," = "," AND") */
      :new.TECH_SUP_APP_NO = TECH_SUP_APP.TECH_SUP_APP_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TECH_SUP_SEQ_STATUS because TECH_SUP_APP does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/


CREATE  TRIGGER tI_TECH_SUP_SUBMIT BEFORE INSERT ON TECH_SUP_SUBMIT for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- INSERT trigger on TECH_SUP_SUBMIT 
DECLARE NUMROWS INTEGER;
BEGIN
    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* TECH_SUP R/71 TECH_SUP_SUBMIT on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="000228f8", PARENT_OWNER="", PARENT_TABLE="TECH_SUP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SUBMIT"
    P2C_VERB_PHRASE="R/71", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_71", FK_COLUMNS="TECH_SUP_NO" */
    SELECT count(*) INTO NUMROWS
      FROM TECH_SUP
      WHERE
        /* %JoinFKPK(:%New,TECH_SUP," = "," AND") */
        :new.TECH_SUP_NO = TECH_SUP.TECH_SUP_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TECH_SUP_SUBMIT because TECH_SUP does not exist.'
      );
    END IF;

    /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
    /* CHMAN R/72 TECH_SUP_SUBMIT on child insert restrict */
    /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SUBMIT"
    P2C_VERB_PHRASE="R/72", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_72", FK_COLUMNS="CHMAN_NO" */
    SELECT count(*) INTO NUMROWS
      FROM CHMAN
      WHERE
        /* %JoinFKPK(:%New,CHMAN," = "," AND") */
        :new.CHMAN_NO = CHMAN.CHMAN_NO;
    IF (
      /* %NotnullFK(:%New," IS NOT NULL AND") */
      
      NUMROWS = 0
    )
    THEN
      raise_application_error(
        -20002,
        'Cannot insert TECH_SUP_SUBMIT because CHMAN does not exist.'
      );
    END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

CREATE  TRIGGER tU_TECH_SUP_SUBMIT AFTER UPDATE ON TECH_SUP_SUBMIT for each row
-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
-- UPDATE trigger on TECH_SUP_SUBMIT 
DECLARE NUMROWS INTEGER;
BEGIN
  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* TECH_SUP R/71 TECH_SUP_SUBMIT on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="0002176a", PARENT_OWNER="", PARENT_TABLE="TECH_SUP"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SUBMIT"
    P2C_VERB_PHRASE="R/71", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_71", FK_COLUMNS="TECH_SUP_NO" */
  SELECT count(*) INTO NUMROWS
    FROM TECH_SUP
    WHERE
      /* %JoinFKPK(:%New,TECH_SUP," = "," AND") */
      :new.TECH_SUP_NO = TECH_SUP.TECH_SUP_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TECH_SUP_SUBMIT because TECH_SUP does not exist.'
    );
  END IF;

  /* ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38 */
  /* CHMAN R/72 TECH_SUP_SUBMIT on child update restrict */
  /* ERWIN_RELATION:CHECKSUM="00000000", PARENT_OWNER="", PARENT_TABLE="CHMAN"
    CHILD_OWNER="", CHILD_TABLE="TECH_SUP_SUBMIT"
    P2C_VERB_PHRASE="R/72", C2P_VERB_PHRASE="", 
    FK_CONSTRAINT="R_72", FK_COLUMNS="CHMAN_NO" */
  SELECT count(*) INTO NUMROWS
    FROM CHMAN
    WHERE
      /* %JoinFKPK(:%New,CHMAN," = "," AND") */
      :new.CHMAN_NO = CHMAN.CHMAN_NO;
  IF (
    /* %NotnullFK(:%New," IS NOT NULL AND") */
    
    NUMROWS = 0
  )
  THEN
    raise_application_error(
      -20007,
      'Cannot update TECH_SUP_SUBMIT because CHMAN does not exist.'
    );
  END IF;


-- ERwin Builtin 2010년 10월 21일 목요일 오후 1:21:38
END;
/

